-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bd_3a92_csc_0_v_csc_core_Pipeline_VITIS_LOOP_91_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    stream_in_hresampled_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    stream_in_hresampled_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    stream_in_hresampled_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    stream_in_hresampled_empty_n : IN STD_LOGIC;
    stream_in_hresampled_read : OUT STD_LOGIC;
    stream_csc_din : OUT STD_LOGIC_VECTOR (23 downto 0);
    stream_csc_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    stream_csc_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    stream_csc_full_n : IN STD_LOGIC;
    stream_csc_write : OUT STD_LOGIC;
    add_ln89 : IN STD_LOGIC_VECTOR (11 downto 0);
    p_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (15 downto 0);
    cmp20_not : IN STD_LOGIC_VECTOR (0 downto 0);
    cmp17_not : IN STD_LOGIC_VECTOR (0 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read18 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read19 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read20 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read21 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read8 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read22 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read9 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read23 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read10 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read24 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read11 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read25 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read12 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read26 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read17 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read31 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read16 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read30 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read15 : IN STD_LOGIC_VECTOR (9 downto 0);
    p_read29 : IN STD_LOGIC_VECTOR (9 downto 0);
    p_read14 : IN STD_LOGIC_VECTOR (9 downto 0);
    p_read28 : IN STD_LOGIC_VECTOR (9 downto 0);
    p_read13 : IN STD_LOGIC_VECTOR (9 downto 0);
    p_read27 : IN STD_LOGIC_VECTOR (9 downto 0) );
end;


architecture behav of bd_3a92_csc_0_v_csc_core_Pipeline_VITIS_LOOP_91_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv24_800 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000100000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln91_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal stream_in_hresampled_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal stream_csc_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal or_ln105_1_fu_427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln105_1_reg_1111 : STD_LOGIC_VECTOR (0 downto 0);
    signal Rpix_fu_444_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal Rpix_reg_1116 : STD_LOGIC_VECTOR (7 downto 0);
    signal Gpix_reg_1121 : STD_LOGIC_VECTOR (7 downto 0);
    signal Bpix_reg_1126 : STD_LOGIC_VECTOR (7 downto 0);
    signal Bpix_reg_1126_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln105_2_fu_468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln105_2_reg_1131 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln105_2_reg_1131_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln105_2_reg_1131_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln105_2_reg_1131_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln105_2_reg_1131_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln105_2_reg_1131_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln61_fu_526_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln61_1_fu_529_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln145_fu_532_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_894_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln147_1_reg_1230 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_886_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln147_reg_1236 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_908_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln149_1_reg_1242 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_900_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln149_reg_1248 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_922_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln151_1_reg_1254 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_914_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln151_reg_1260 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln147_1_fu_623_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln147_1_reg_1266 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln147_fu_629_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln147_reg_1271 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln147_reg_1271_pp0_iter7_reg : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_928_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln147_2_reg_1276 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln147_1_fu_633_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln147_1_reg_1281 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln147_1_reg_1281_pp0_iter7_reg : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln149_1_fu_646_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln149_1_reg_1286 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln149_fu_652_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln149_reg_1291 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln149_reg_1291_pp0_iter7_reg : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_937_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln149_2_reg_1296 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln149_1_fu_656_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln149_1_reg_1301 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln149_1_reg_1301_pp0_iter7_reg : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln151_1_fu_669_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln151_1_reg_1306 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln151_fu_675_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln151_reg_1311 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln151_reg_1311_pp0_iter7_reg : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_946_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln151_2_reg_1316 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln151_1_fu_679_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln151_1_reg_1321 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln151_1_reg_1321_pp0_iter7_reg : STD_LOGIC_VECTOR (19 downto 0);
    signal max_val_fu_682_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_val_reg_1326 : STD_LOGIC_VECTOR (7 downto 0);
    signal min_val_fu_687_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal min_val_reg_1334 : STD_LOGIC_VECTOR (7 downto 0);
    signal Rres_reg_1342 : STD_LOGIC_VECTOR (13 downto 0);
    signal Gres_reg_1348 : STD_LOGIC_VECTOR (13 downto 0);
    signal Bres_reg_1354 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln153_1_fu_803_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln153_1_reg_1360 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln155_1_fu_857_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln155_1_reg_1365 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln154_1_fu_871_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln154_1_reg_1370 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_fu_140 : STD_LOGIC_VECTOR (11 downto 0);
    signal x_6_fu_433_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_x_5 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln91_fu_363_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln103_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln103_1_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln104_1_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln104_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln104_fu_403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln105_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln103_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln105_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal coef32_fu_497_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal coef31_fu_492_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal coef22_fu_487_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal coef21_fu_482_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal coef12_fu_477_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal coef11_fu_472_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal coef33_fu_545_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal coef23_fu_540_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal coef13_fu_535_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln105_11_fu_562_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal offsetB_fu_567_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal select_ln105_12_fu_579_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal offsetG_fu_584_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal select_ln105_13_fu_596_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal offsetR_fu_601_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln147_2_fu_616_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln147_fu_613_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln147_5_fu_619_p2 : STD_LOGIC_VECTOR (23 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln147_5_fu_619_p2 : signal is "no";
    signal sext_ln149_2_fu_639_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln149_fu_636_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln149_5_fu_642_p2 : STD_LOGIC_VECTOR (23 downto 0);
    attribute use_dsp48 of add_ln149_5_fu_642_p2 : signal is "no";
    signal sext_ln151_2_fu_662_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln151_fu_659_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln151_5_fu_665_p2 : STD_LOGIC_VECTOR (23 downto 0);
    attribute use_dsp48 of add_ln151_5_fu_665_p2 : signal is "no";
    signal sext_ln147_4_fu_695_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln147_3_fu_692_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln147_3_fu_698_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln149_4_fu_717_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln149_3_fu_714_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln149_3_fu_720_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln151_4_fu_739_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln151_3_fu_736_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln151_3_fu_742_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln65_fu_758_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln65_1_fu_761_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln147_4_fu_764_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln153_1_fu_781_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln_fu_786_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln153_fu_776_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln153_fu_796_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln149_4_fu_768_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln151_4_fu_772_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln155_1_fu_835_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln4_fu_840_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln155_fu_830_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln155_fu_850_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln154_1_fu_815_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln3_fu_820_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln154_fu_810_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln154_fu_864_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_886_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_886_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_894_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_900_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_900_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_908_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_914_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_914_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_922_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_928_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_937_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_946_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_886_ce : STD_LOGIC;
    signal grp_fu_894_ce : STD_LOGIC;
    signal grp_fu_900_ce : STD_LOGIC;
    signal grp_fu_908_ce : STD_LOGIC;
    signal grp_fu_914_ce : STD_LOGIC;
    signal grp_fu_922_ce : STD_LOGIC;
    signal grp_fu_928_ce : STD_LOGIC;
    signal grp_fu_937_ce : STD_LOGIC;
    signal grp_fu_946_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component bd_3a92_csc_0_mac_muladd_16s_8ns_12ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component bd_3a92_csc_0_mul_mul_16s_8ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component bd_3a92_csc_0_mac_muladd_8ns_16s_22s_25_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (21 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component bd_3a92_csc_0_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mac_muladd_16s_8ns_12ns_24_4_1_U126 : component bd_3a92_csc_0_mac_muladd_16s_8ns_12ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 12,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => coef11_fu_472_p3,
        din1 => grp_fu_886_p1,
        din2 => grp_fu_886_p2,
        ce => grp_fu_886_ce,
        dout => grp_fu_886_p3);

    mul_mul_16s_8ns_24_4_1_U127 : component bd_3a92_csc_0_mul_mul_16s_8ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => coef12_fu_477_p3,
        din1 => grp_fu_894_p1,
        ce => grp_fu_894_ce,
        dout => grp_fu_894_p2);

    mac_muladd_16s_8ns_12ns_24_4_1_U128 : component bd_3a92_csc_0_mac_muladd_16s_8ns_12ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 12,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => coef21_fu_482_p3,
        din1 => grp_fu_900_p1,
        din2 => grp_fu_900_p2,
        ce => grp_fu_900_ce,
        dout => grp_fu_900_p3);

    mul_mul_16s_8ns_24_4_1_U129 : component bd_3a92_csc_0_mul_mul_16s_8ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => coef22_fu_487_p3,
        din1 => grp_fu_908_p1,
        ce => grp_fu_908_ce,
        dout => grp_fu_908_p2);

    mac_muladd_16s_8ns_12ns_24_4_1_U130 : component bd_3a92_csc_0_mac_muladd_16s_8ns_12ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 12,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => coef31_fu_492_p3,
        din1 => grp_fu_914_p1,
        din2 => grp_fu_914_p2,
        ce => grp_fu_914_ce,
        dout => grp_fu_914_p3);

    mul_mul_16s_8ns_24_4_1_U131 : component bd_3a92_csc_0_mul_mul_16s_8ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => coef32_fu_497_p3,
        din1 => grp_fu_922_p1,
        ce => grp_fu_922_ce,
        dout => grp_fu_922_p2);

    mac_muladd_8ns_16s_22s_25_4_1_U132 : component bd_3a92_csc_0_mac_muladd_8ns_16s_22s_25_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 22,
        dout_WIDTH => 25)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_928_p0,
        din1 => coef13_fu_535_p3,
        din2 => offsetR_fu_601_p3,
        ce => grp_fu_928_ce,
        dout => grp_fu_928_p3);

    mac_muladd_8ns_16s_22s_25_4_1_U133 : component bd_3a92_csc_0_mac_muladd_8ns_16s_22s_25_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 22,
        dout_WIDTH => 25)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_937_p0,
        din1 => coef23_fu_540_p3,
        din2 => offsetG_fu_584_p3,
        ce => grp_fu_937_ce,
        dout => grp_fu_937_p3);

    mac_muladd_8ns_16s_22s_25_4_1_U134 : component bd_3a92_csc_0_mac_muladd_8ns_16s_22s_25_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 22,
        dout_WIDTH => 25)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_946_p0,
        din1 => coef33_fu_545_p3,
        din2 => offsetB_fu_567_p3,
        ce => grp_fu_946_ce,
        dout => grp_fu_946_p3);

    flow_control_loop_pipe_sequential_init_U : component bd_3a92_csc_0_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    x_fu_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln91_fu_367_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    x_fu_140 <= x_6_fu_433_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    x_fu_140 <= ap_const_lv12_1;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                Bpix_reg_1126 <= stream_in_hresampled_dout(23 downto 16);
                Gpix_reg_1121 <= stream_in_hresampled_dout(15 downto 8);
                Rpix_reg_1116 <= Rpix_fu_444_p1;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                or_ln105_2_reg_1131 <= or_ln105_2_fu_468_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                Bpix_reg_1126_pp0_iter2_reg <= Bpix_reg_1126;
                Bres_reg_1354 <= add_ln151_3_fu_742_p2(25 downto 12);
                Gres_reg_1348 <= add_ln149_3_fu_720_p2(25 downto 12);
                Rres_reg_1342 <= add_ln147_3_fu_698_p2(25 downto 12);
                add_ln147_1_reg_1266 <= add_ln147_1_fu_623_p2;
                add_ln149_1_reg_1286 <= add_ln149_1_fu_646_p2;
                add_ln151_1_reg_1306 <= add_ln151_1_fu_669_p2;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                max_val_reg_1326 <= max_val_fu_682_p3;
                min_val_reg_1334 <= min_val_fu_687_p3;
                mul_ln147_1_reg_1230 <= grp_fu_894_p2;
                mul_ln149_1_reg_1242 <= grp_fu_908_p2;
                mul_ln151_1_reg_1254 <= grp_fu_922_p2;
                or_ln105_2_reg_1131_pp0_iter2_reg <= or_ln105_2_reg_1131;
                or_ln105_2_reg_1131_pp0_iter3_reg <= or_ln105_2_reg_1131_pp0_iter2_reg;
                or_ln105_2_reg_1131_pp0_iter4_reg <= or_ln105_2_reg_1131_pp0_iter3_reg;
                or_ln105_2_reg_1131_pp0_iter5_reg <= or_ln105_2_reg_1131_pp0_iter4_reg;
                or_ln105_2_reg_1131_pp0_iter6_reg <= or_ln105_2_reg_1131_pp0_iter5_reg;
                select_ln153_1_reg_1360 <= select_ln153_1_fu_803_p3;
                select_ln154_1_reg_1370 <= select_ln154_1_fu_871_p3;
                select_ln155_1_reg_1365 <= select_ln155_1_fu_857_p3;
                trunc_ln147_1_reg_1281 <= trunc_ln147_1_fu_633_p1;
                trunc_ln147_1_reg_1281_pp0_iter7_reg <= trunc_ln147_1_reg_1281;
                trunc_ln147_reg_1271 <= trunc_ln147_fu_629_p1;
                trunc_ln147_reg_1271_pp0_iter7_reg <= trunc_ln147_reg_1271;
                trunc_ln149_1_reg_1301 <= trunc_ln149_1_fu_656_p1;
                trunc_ln149_1_reg_1301_pp0_iter7_reg <= trunc_ln149_1_reg_1301;
                trunc_ln149_reg_1291 <= trunc_ln149_fu_652_p1;
                trunc_ln149_reg_1291_pp0_iter7_reg <= trunc_ln149_reg_1291;
                trunc_ln151_1_reg_1321 <= trunc_ln151_1_fu_679_p1;
                trunc_ln151_1_reg_1321_pp0_iter7_reg <= trunc_ln151_1_reg_1321;
                trunc_ln151_reg_1311 <= trunc_ln151_fu_675_p1;
                trunc_ln151_reg_1311_pp0_iter7_reg <= trunc_ln151_reg_1311;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then
                add_ln147_2_reg_1276 <= grp_fu_928_p3;
                add_ln149_2_reg_1296 <= grp_fu_937_p3;
                add_ln151_2_reg_1316 <= grp_fu_946_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then
                add_ln147_reg_1236 <= grp_fu_886_p3;
                add_ln149_reg_1248 <= grp_fu_900_p3;
                add_ln151_reg_1260 <= grp_fu_914_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln91_fu_367_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                or_ln105_1_reg_1111 <= or_ln105_1_fu_427_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    Rpix_fu_444_p1 <= stream_in_hresampled_dout(8 - 1 downto 0);
    add_ln147_1_fu_623_p2 <= std_logic_vector(signed(sext_ln147_2_fu_616_p1) + signed(sext_ln147_fu_613_p1));
    add_ln147_3_fu_698_p2 <= std_logic_vector(signed(sext_ln147_4_fu_695_p1) + signed(sext_ln147_3_fu_692_p1));
    add_ln147_4_fu_764_p2 <= std_logic_vector(unsigned(trunc_ln147_1_reg_1281_pp0_iter7_reg) + unsigned(trunc_ln147_reg_1271_pp0_iter7_reg));
    add_ln147_5_fu_619_p2 <= std_logic_vector(signed(add_ln147_reg_1236) + signed(mul_ln147_1_reg_1230));
    add_ln149_1_fu_646_p2 <= std_logic_vector(signed(sext_ln149_2_fu_639_p1) + signed(sext_ln149_fu_636_p1));
    add_ln149_3_fu_720_p2 <= std_logic_vector(signed(sext_ln149_4_fu_717_p1) + signed(sext_ln149_3_fu_714_p1));
    add_ln149_4_fu_768_p2 <= std_logic_vector(unsigned(trunc_ln149_1_reg_1301_pp0_iter7_reg) + unsigned(trunc_ln149_reg_1291_pp0_iter7_reg));
    add_ln149_5_fu_642_p2 <= std_logic_vector(signed(add_ln149_reg_1248) + signed(mul_ln149_1_reg_1242));
    add_ln151_1_fu_669_p2 <= std_logic_vector(signed(sext_ln151_2_fu_662_p1) + signed(sext_ln151_fu_659_p1));
    add_ln151_3_fu_742_p2 <= std_logic_vector(signed(sext_ln151_4_fu_739_p1) + signed(sext_ln151_3_fu_736_p1));
    add_ln151_4_fu_772_p2 <= std_logic_vector(unsigned(trunc_ln151_1_reg_1321_pp0_iter7_reg) + unsigned(trunc_ln151_reg_1311_pp0_iter7_reg));
    add_ln151_5_fu_665_p2 <= std_logic_vector(signed(add_ln151_reg_1260) + signed(mul_ln151_1_reg_1254));
    and_ln104_fu_403_p2 <= (icmp_ln104_fu_391_p2 and icmp_ln104_1_fu_397_p2);
    and_ln105_fu_421_p2 <= (xor_ln105_fu_415_p2 and or_ln103_fu_385_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter9, stream_in_hresampled_empty_n, stream_csc_full_n)
    begin
                ap_block_pp0_stage0_01001 <= (((stream_csc_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)) or ((stream_in_hresampled_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter9, stream_in_hresampled_empty_n, stream_csc_full_n)
    begin
                ap_block_pp0_stage0_11001 <= (((stream_csc_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)) or ((stream_in_hresampled_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter9, stream_in_hresampled_empty_n, stream_csc_full_n)
    begin
                ap_block_pp0_stage0_subdone <= (((stream_csc_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)) or ((stream_in_hresampled_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state10_pp0_stage0_iter9_assign_proc : process(stream_csc_full_n)
    begin
                ap_block_state10_pp0_stage0_iter9 <= (stream_csc_full_n = ap_const_logic_0);
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(stream_in_hresampled_empty_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (stream_in_hresampled_empty_n = ap_const_logic_0);
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln91_fu_367_p2)
    begin
        if (((icmp_ln91_fu_367_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter8_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_x_5_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, x_fu_140, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_x_5 <= ap_const_lv12_1;
        else 
            ap_sig_allocacmp_x_5 <= x_fu_140;
        end if; 
    end process;

    coef11_fu_472_p3 <= 
        p_read4 when (or_ln105_2_reg_1131(0) = '1') else 
        p_read18;
    coef12_fu_477_p3 <= 
        p_read5 when (or_ln105_2_reg_1131(0) = '1') else 
        p_read19;
    coef13_fu_535_p3 <= 
        p_read6 when (or_ln105_2_reg_1131_pp0_iter2_reg(0) = '1') else 
        p_read20;
    coef21_fu_482_p3 <= 
        p_read7 when (or_ln105_2_reg_1131(0) = '1') else 
        p_read21;
    coef22_fu_487_p3 <= 
        p_read8 when (or_ln105_2_reg_1131(0) = '1') else 
        p_read22;
    coef23_fu_540_p3 <= 
        p_read9 when (or_ln105_2_reg_1131_pp0_iter2_reg(0) = '1') else 
        p_read23;
    coef31_fu_492_p3 <= 
        p_read10 when (or_ln105_2_reg_1131(0) = '1') else 
        p_read24;
    coef32_fu_497_p3 <= 
        p_read11 when (or_ln105_2_reg_1131(0) = '1') else 
        p_read25;
    coef33_fu_545_p3 <= 
        p_read12 when (or_ln105_2_reg_1131_pp0_iter2_reg(0) = '1') else 
        p_read26;

    grp_fu_886_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_886_ce <= ap_const_logic_1;
        else 
            grp_fu_886_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_886_p1 <= zext_ln61_fu_526_p1(8 - 1 downto 0);
    grp_fu_886_p2 <= ap_const_lv24_800(12 - 1 downto 0);

    grp_fu_894_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_894_ce <= ap_const_logic_1;
        else 
            grp_fu_894_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_894_p1 <= zext_ln61_1_fu_529_p1(8 - 1 downto 0);

    grp_fu_900_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_900_ce <= ap_const_logic_1;
        else 
            grp_fu_900_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_900_p1 <= zext_ln61_fu_526_p1(8 - 1 downto 0);
    grp_fu_900_p2 <= ap_const_lv24_800(12 - 1 downto 0);

    grp_fu_908_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_908_ce <= ap_const_logic_1;
        else 
            grp_fu_908_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_908_p1 <= zext_ln61_1_fu_529_p1(8 - 1 downto 0);

    grp_fu_914_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_914_ce <= ap_const_logic_1;
        else 
            grp_fu_914_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_914_p1 <= zext_ln61_fu_526_p1(8 - 1 downto 0);
    grp_fu_914_p2 <= ap_const_lv24_800(12 - 1 downto 0);

    grp_fu_922_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_922_ce <= ap_const_logic_1;
        else 
            grp_fu_922_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_922_p1 <= zext_ln61_1_fu_529_p1(8 - 1 downto 0);

    grp_fu_928_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_928_ce <= ap_const_logic_1;
        else 
            grp_fu_928_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_928_p0 <= zext_ln145_fu_532_p1(8 - 1 downto 0);

    grp_fu_937_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_937_ce <= ap_const_logic_1;
        else 
            grp_fu_937_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_937_p0 <= zext_ln145_fu_532_p1(8 - 1 downto 0);

    grp_fu_946_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_946_ce <= ap_const_logic_1;
        else 
            grp_fu_946_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_946_p0 <= zext_ln145_fu_532_p1(8 - 1 downto 0);
    icmp_ln103_1_fu_379_p2 <= "1" when (zext_ln91_fu_363_p1 = p_read1) else "0";
    icmp_ln103_fu_373_p2 <= "0" when (zext_ln91_fu_363_p1 = p_read) else "1";
    icmp_ln104_1_fu_397_p2 <= "1" when (signed(zext_ln91_fu_363_p1) < signed(p_read1)) else "0";
    icmp_ln104_fu_391_p2 <= "1" when (signed(zext_ln91_fu_363_p1) > signed(p_read)) else "0";
    icmp_ln153_1_fu_781_p2 <= "1" when (signed(Rres_reg_1342) > signed(zext_ln65_1_fu_761_p1)) else "0";
    icmp_ln153_fu_776_p2 <= "1" when (signed(Rres_reg_1342) < signed(zext_ln65_fu_758_p1)) else "0";
    icmp_ln154_1_fu_815_p2 <= "1" when (signed(Gres_reg_1348) > signed(zext_ln65_1_fu_761_p1)) else "0";
    icmp_ln154_fu_810_p2 <= "1" when (signed(Gres_reg_1348) < signed(zext_ln65_fu_758_p1)) else "0";
    icmp_ln155_1_fu_835_p2 <= "1" when (signed(Bres_reg_1354) > signed(zext_ln65_1_fu_761_p1)) else "0";
    icmp_ln155_fu_830_p2 <= "1" when (signed(Bres_reg_1354) < signed(zext_ln65_fu_758_p1)) else "0";
    icmp_ln91_fu_367_p2 <= "1" when (ap_sig_allocacmp_x_5 = add_ln89) else "0";
    max_val_fu_682_p3 <= 
        p_read17 when (or_ln105_2_reg_1131_pp0_iter6_reg(0) = '1') else 
        p_read31;
    min_val_fu_687_p3 <= 
        p_read16 when (or_ln105_2_reg_1131_pp0_iter6_reg(0) = '1') else 
        p_read30;
    offsetB_fu_567_p3 <= (select_ln105_11_fu_562_p3 & ap_const_lv12_0);
    offsetG_fu_584_p3 <= (select_ln105_12_fu_579_p3 & ap_const_lv12_0);
    offsetR_fu_601_p3 <= (select_ln105_13_fu_596_p3 & ap_const_lv12_0);
    or_ln103_fu_385_p2 <= (icmp_ln103_fu_373_p2 or icmp_ln103_1_fu_379_p2);
    or_ln105_1_fu_427_p2 <= (cmp20_not or and_ln105_fu_421_p2);
    or_ln105_2_fu_468_p2 <= (or_ln105_1_reg_1111 or cmp17_not);
    or_ln105_fu_409_p2 <= (icmp_ln103_1_fu_379_p2 or and_ln104_fu_403_p2);
    select_ln105_11_fu_562_p3 <= 
        p_read15 when (or_ln105_2_reg_1131_pp0_iter4_reg(0) = '1') else 
        p_read29;
    select_ln105_12_fu_579_p3 <= 
        p_read14 when (or_ln105_2_reg_1131_pp0_iter4_reg(0) = '1') else 
        p_read28;
    select_ln105_13_fu_596_p3 <= 
        p_read13 when (or_ln105_2_reg_1131_pp0_iter4_reg(0) = '1') else 
        p_read27;
    select_ln153_1_fu_803_p3 <= 
        min_val_reg_1334 when (icmp_ln153_fu_776_p2(0) = '1') else 
        select_ln153_fu_796_p3;
    select_ln153_fu_796_p3 <= 
        max_val_reg_1326 when (icmp_ln153_1_fu_781_p2(0) = '1') else 
        trunc_ln_fu_786_p4;
    select_ln154_1_fu_871_p3 <= 
        min_val_reg_1334 when (icmp_ln154_fu_810_p2(0) = '1') else 
        select_ln154_fu_864_p3;
    select_ln154_fu_864_p3 <= 
        max_val_reg_1326 when (icmp_ln154_1_fu_815_p2(0) = '1') else 
        trunc_ln3_fu_820_p4;
    select_ln155_1_fu_857_p3 <= 
        min_val_reg_1334 when (icmp_ln155_fu_830_p2(0) = '1') else 
        select_ln155_fu_850_p3;
    select_ln155_fu_850_p3 <= 
        max_val_reg_1326 when (icmp_ln155_1_fu_835_p2(0) = '1') else 
        trunc_ln4_fu_840_p4;
        sext_ln147_2_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln147_reg_1236),25));

        sext_ln147_3_fu_692_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln147_1_reg_1266),26));

        sext_ln147_4_fu_695_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln147_2_reg_1276),26));

        sext_ln147_fu_613_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln147_1_reg_1230),25));

        sext_ln149_2_fu_639_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln149_reg_1248),25));

        sext_ln149_3_fu_714_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln149_1_reg_1286),26));

        sext_ln149_4_fu_717_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln149_2_reg_1296),26));

        sext_ln149_fu_636_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln149_1_reg_1242),25));

        sext_ln151_2_fu_662_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln151_reg_1260),25));

        sext_ln151_3_fu_736_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln151_1_reg_1306),26));

        sext_ln151_4_fu_739_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln151_2_reg_1316),26));

        sext_ln151_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln151_1_reg_1254),25));


    stream_csc_blk_n_assign_proc : process(ap_enable_reg_pp0_iter9, stream_csc_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            stream_csc_blk_n <= stream_csc_full_n;
        else 
            stream_csc_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stream_csc_din <= ((select_ln155_1_reg_1365 & select_ln154_1_reg_1370) & select_ln153_1_reg_1360);

    stream_csc_write_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            stream_csc_write <= ap_const_logic_1;
        else 
            stream_csc_write <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_hresampled_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, stream_in_hresampled_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stream_in_hresampled_blk_n <= stream_in_hresampled_empty_n;
        else 
            stream_in_hresampled_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    stream_in_hresampled_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stream_in_hresampled_read <= ap_const_logic_1;
        else 
            stream_in_hresampled_read <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln147_1_fu_633_p1 <= grp_fu_928_p3(20 - 1 downto 0);
    trunc_ln147_fu_629_p1 <= add_ln147_5_fu_619_p2(20 - 1 downto 0);
    trunc_ln149_1_fu_656_p1 <= grp_fu_937_p3(20 - 1 downto 0);
    trunc_ln149_fu_652_p1 <= add_ln149_5_fu_642_p2(20 - 1 downto 0);
    trunc_ln151_1_fu_679_p1 <= grp_fu_946_p3(20 - 1 downto 0);
    trunc_ln151_fu_675_p1 <= add_ln151_5_fu_665_p2(20 - 1 downto 0);
    trunc_ln3_fu_820_p4 <= add_ln149_4_fu_768_p2(19 downto 12);
    trunc_ln4_fu_840_p4 <= add_ln151_4_fu_772_p2(19 downto 12);
    trunc_ln_fu_786_p4 <= add_ln147_4_fu_764_p2(19 downto 12);
    x_6_fu_433_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_x_5) + unsigned(ap_const_lv12_1));
    xor_ln105_fu_415_p2 <= (or_ln105_fu_409_p2 xor ap_const_lv1_1);
    zext_ln145_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Bpix_reg_1126_pp0_iter2_reg),24));
    zext_ln61_1_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Gpix_reg_1121),24));
    zext_ln61_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Rpix_reg_1116),24));
    zext_ln65_1_fu_761_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_val_reg_1326),14));
    zext_ln65_fu_758_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(min_val_reg_1334),14));
    zext_ln91_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_x_5),16));
end behav;
