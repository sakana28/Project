// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module bd_3a92_ltr_0_v_letterbox_core (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        srcYUV_dout,
        srcYUV_num_data_valid,
        srcYUV_fifo_cap,
        srcYUV_empty_n,
        srcYUV_read,
        height,
        width,
        video_format,
        col_start,
        col_end,
        row_start,
        row_end,
        Y_R_value,
        Cb_G_value,
        Cr_B_value,
        outYUV_din,
        outYUV_num_data_valid,
        outYUV_fifo_cap,
        outYUV_full_n,
        outYUV_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [23:0] srcYUV_dout;
input  [4:0] srcYUV_num_data_valid;
input  [4:0] srcYUV_fifo_cap;
input   srcYUV_empty_n;
output   srcYUV_read;
input  [15:0] height;
input  [15:0] width;
input  [15:0] video_format;
input  [15:0] col_start;
input  [15:0] col_end;
input  [15:0] row_start;
input  [15:0] row_end;
input  [15:0] Y_R_value;
input  [15:0] Cb_G_value;
input  [15:0] Cr_B_value;
output  [23:0] outYUV_din;
input  [4:0] outYUV_num_data_valid;
input  [4:0] outYUV_fifo_cap;
input   outYUV_full_n;
output   outYUV_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg srcYUV_read;
reg outYUV_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
wire   [16:0] height_load_cast_fu_138_p1;
wire   [16:0] row_start_load_cast_fu_142_p1;
wire   [16:0] row_end_load_cast_fu_146_p1;
wire   [0:0] cmp116_fu_154_p2;
wire   [7:0] empty_35_fu_164_p1;
wire   [0:0] cmp19_not_fu_193_p2;
reg   [0:0] cmp19_not_reg_279;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln165_fu_188_p2;
wire   [0:0] cmp22_not_fu_198_p2;
reg   [0:0] cmp22_not_reg_284;
wire    grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_ap_start;
wire    grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_ap_done;
wire    grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_ap_idle;
wire    grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_ap_ready;
wire    grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_srcYUV_read;
wire   [23:0] grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_outYUV_din;
wire    grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_outYUV_write;
wire   [7:0] grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_p_0_2_0_0_0154;
wire   [7:0] grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_conv2_i_i;
wire   [7:0] grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_Cb_G_value_load_cast;
reg    grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg   [15:0] y_fu_56;
wire   [15:0] y_3_fu_203_p2;
reg    ap_block_state1;
wire  signed [15:0] sext_ln165_fu_184_p0;
wire  signed [16:0] sext_ln165_fu_184_p1;
wire  signed [15:0] y_3_fu_203_p0;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_ap_start_reg = 1'b0;
end

bd_3a92_ltr_0_v_letterbox_core_Pipeline_VITIS_LOOP_167_2 grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_ap_start),
    .ap_done(grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_ap_done),
    .ap_idle(grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_ap_idle),
    .ap_ready(grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_ap_ready),
    .srcYUV_dout(srcYUV_dout),
    .srcYUV_num_data_valid(5'd0),
    .srcYUV_fifo_cap(5'd0),
    .srcYUV_empty_n(srcYUV_empty_n),
    .srcYUV_read(grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_srcYUV_read),
    .outYUV_din(grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_outYUV_din),
    .outYUV_num_data_valid(5'd0),
    .outYUV_fifo_cap(5'd0),
    .outYUV_full_n(outYUV_full_n),
    .outYUV_write(grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_outYUV_write),
    .loopWidth(width),
    .loopStart(col_start),
    .loopEnd(col_end),
    .cmp116(cmp116_fu_154_p2),
    .cmp22_not(cmp22_not_reg_284),
    .cmp19_not(cmp19_not_reg_279),
    .p_0_2_0_0_0154(grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_p_0_2_0_0_0154),
    .conv2_i_i(grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_conv2_i_i),
    .Cb_G_value_load_cast(grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_Cb_G_value_load_cast),
    .Cr_B_value_load_cast(empty_35_fu_164_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln165_fu_188_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_ap_start_reg <= 1'b1;
        end else if ((grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_ap_ready == 1'b1)) begin
            grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        y_fu_56 <= 16'd1;
    end else if (((icmp_ln165_fu_188_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        y_fu_56 <= y_3_fu_203_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln165_fu_188_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        cmp19_not_reg_279 <= cmp19_not_fu_193_p2;
        cmp22_not_reg_284 <= cmp22_not_fu_198_p2;
    end
end

always @ (*) begin
    if (((ap_done_reg == 1'b1) | (real_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln165_fu_188_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln165_fu_188_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        outYUV_write = grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_outYUV_write;
    end else begin
        outYUV_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        srcYUV_read = grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_srcYUV_read;
    end else begin
        srcYUV_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln165_fu_188_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign cmp116_fu_154_p2 = ((video_format == 16'd2) ? 1'b1 : 1'b0);

assign cmp19_not_fu_193_p2 = (($signed(sext_ln165_fu_184_p1) < $signed(row_start_load_cast_fu_142_p1)) ? 1'b1 : 1'b0);

assign cmp22_not_fu_198_p2 = (($signed(sext_ln165_fu_184_p1) > $signed(row_end_load_cast_fu_146_p1)) ? 1'b1 : 1'b0);

assign empty_35_fu_164_p1 = Cr_B_value[7:0];

assign grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_Cb_G_value_load_cast = Cb_G_value[7:0];

assign grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_ap_start = grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_ap_start_reg;

assign grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_conv2_i_i = Y_R_value[7:0];

assign grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_p_0_2_0_0_0154 = ((cmp116_fu_154_p2[0:0] == 1'b1) ? 8'd0 : empty_35_fu_164_p1);

assign height_load_cast_fu_138_p1 = height;

assign icmp_ln165_fu_188_p2 = (($signed(sext_ln165_fu_184_p1) > $signed(height_load_cast_fu_138_p1)) ? 1'b1 : 1'b0);

assign outYUV_din = grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_outYUV_din;

assign row_end_load_cast_fu_146_p1 = row_end;

assign row_start_load_cast_fu_142_p1 = row_start;

assign sext_ln165_fu_184_p0 = y_fu_56;

assign sext_ln165_fu_184_p1 = sext_ln165_fu_184_p0;

assign start_out = real_start;

assign y_3_fu_203_p0 = y_fu_56;

assign y_3_fu_203_p2 = ($signed(y_3_fu_203_p0) + $signed(16'd1));

endmodule //bd_3a92_ltr_0_v_letterbox_core
