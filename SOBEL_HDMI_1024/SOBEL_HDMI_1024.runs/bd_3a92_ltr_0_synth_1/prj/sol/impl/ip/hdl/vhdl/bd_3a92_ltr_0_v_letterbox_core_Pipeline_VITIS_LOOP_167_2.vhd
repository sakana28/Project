-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bd_3a92_ltr_0_v_letterbox_core_Pipeline_VITIS_LOOP_167_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    srcYUV_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    srcYUV_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    srcYUV_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    srcYUV_empty_n : IN STD_LOGIC;
    srcYUV_read : OUT STD_LOGIC;
    outYUV_din : OUT STD_LOGIC_VECTOR (23 downto 0);
    outYUV_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    outYUV_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    outYUV_full_n : IN STD_LOGIC;
    outYUV_write : OUT STD_LOGIC;
    loopWidth : IN STD_LOGIC_VECTOR (15 downto 0);
    loopStart : IN STD_LOGIC_VECTOR (15 downto 0);
    loopEnd : IN STD_LOGIC_VECTOR (15 downto 0);
    cmp116 : IN STD_LOGIC_VECTOR (0 downto 0);
    cmp22_not : IN STD_LOGIC_VECTOR (0 downto 0);
    cmp19_not : IN STD_LOGIC_VECTOR (0 downto 0);
    p_0_2_0_0_0154 : IN STD_LOGIC_VECTOR (7 downto 0);
    conv2_i_i : IN STD_LOGIC_VECTOR (7 downto 0);
    Cb_G_value_load_cast : IN STD_LOGIC_VECTOR (7 downto 0);
    Cr_B_value_load_cast : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of bd_3a92_ltr_0_v_letterbox_core_Pipeline_VITIS_LOOP_167_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln167_fu_155_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal srcYUV_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal outYUV_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal or_ln185_2_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln185_2_reg_347 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln207_fu_233_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln207_reg_352 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln185_fu_287_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln185_reg_357 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln185_1_fu_294_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln185_1_reg_362 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln185_2_fu_301_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln185_2_reg_367 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_fu_70 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_3_fu_241_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_x_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln185_fu_161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_1_fu_167_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_3_fu_185_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_2_fu_179_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln185_fu_191_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln185_1_fu_197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln185_fu_173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln185_fu_203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln185_1_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln167_fu_221_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln209_fu_225_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln145_2_fu_266_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln185_3_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln191_fu_276_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln145_fu_252_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln145_1_fu_256_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component bd_3a92_ltr_0_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component bd_3a92_ltr_0_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    x_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln167_fu_155_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    x_fu_70 <= x_3_fu_241_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    x_fu_70 <= ap_const_lv16_1;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                select_ln185_1_reg_362 <= select_ln185_1_fu_294_p3;
                select_ln185_2_reg_367 <= select_ln185_2_fu_301_p3;
                select_ln185_reg_357 <= select_ln185_fu_287_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln167_fu_155_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                or_ln185_2_reg_347 <= or_ln185_2_fu_215_p2;
                select_ln207_reg_352 <= select_ln207_fu_233_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    and_ln185_1_fu_209_p2 <= (xor_ln185_fu_203_p2 and or_ln185_fu_173_p2);
    and_ln185_fu_191_p2 <= (icmp_ln185_3_fu_185_p2 and icmp_ln185_2_fu_179_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, srcYUV_empty_n, outYUV_full_n)
    begin
                ap_block_pp0_stage0_01001 <= (((outYUV_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((srcYUV_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, srcYUV_empty_n, outYUV_full_n)
    begin
                ap_block_pp0_stage0_11001 <= (((outYUV_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((srcYUV_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, srcYUV_empty_n, outYUV_full_n)
    begin
                ap_block_pp0_stage0_subdone <= (((outYUV_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((srcYUV_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(srcYUV_empty_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (srcYUV_empty_n = ap_const_logic_0);
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(outYUV_full_n)
    begin
                ap_block_state3_pp0_stage0_iter2 <= (outYUV_full_n = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln167_fu_155_p2)
    begin
        if (((icmp_ln167_fu_155_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_x_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, x_fu_70, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_x_2 <= ap_const_lv16_1;
        else 
            ap_sig_allocacmp_x_2 <= x_fu_70;
        end if; 
    end process;

    icmp_ln167_fu_155_p2 <= "1" when (signed(ap_sig_allocacmp_x_2) > signed(loopWidth)) else "0";
    icmp_ln185_1_fu_167_p2 <= "1" when (ap_sig_allocacmp_x_2 = loopEnd) else "0";
    icmp_ln185_2_fu_179_p2 <= "1" when (signed(ap_sig_allocacmp_x_2) > signed(loopStart)) else "0";
    icmp_ln185_3_fu_185_p2 <= "1" when (signed(ap_sig_allocacmp_x_2) < signed(loopEnd)) else "0";
    icmp_ln185_fu_161_p2 <= "0" when (ap_sig_allocacmp_x_2 = loopStart) else "1";
    or_ln185_1_fu_197_p2 <= (icmp_ln185_1_fu_167_p2 or and_ln185_fu_191_p2);
    or_ln185_2_fu_215_p2 <= (cmp22_not or and_ln185_1_fu_209_p2);
    or_ln185_3_fu_283_p2 <= (or_ln185_2_reg_347 or cmp19_not);
    or_ln185_fu_173_p2 <= (icmp_ln185_fu_161_p2 or icmp_ln185_1_fu_167_p2);

    outYUV_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, outYUV_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            outYUV_blk_n <= outYUV_full_n;
        else 
            outYUV_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    outYUV_din <= ((select_ln185_reg_357 & select_ln185_2_reg_367) & select_ln185_1_reg_362);

    outYUV_write_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            outYUV_write <= ap_const_logic_1;
        else 
            outYUV_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln185_1_fu_294_p3 <= 
        conv2_i_i when (or_ln185_3_fu_283_p2(0) = '1') else 
        trunc_ln145_fu_252_p1;
    select_ln185_2_fu_301_p3 <= 
        select_ln207_reg_352 when (or_ln185_3_fu_283_p2(0) = '1') else 
        trunc_ln145_1_fu_256_p4;
    select_ln185_fu_287_p3 <= 
        p_0_2_0_0_0154 when (or_ln185_3_fu_283_p2(0) = '1') else 
        select_ln191_fu_276_p3;
    select_ln191_fu_276_p3 <= 
        ap_const_lv8_0 when (cmp116(0) = '1') else 
        trunc_ln145_2_fu_266_p4;
    select_ln207_fu_233_p3 <= 
        select_ln209_fu_225_p3 when (cmp116(0) = '1') else 
        Cb_G_value_load_cast;
    select_ln209_fu_225_p3 <= 
        Cb_G_value_load_cast when (trunc_ln167_fu_221_p1(0) = '1') else 
        Cr_B_value_load_cast;

    srcYUV_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, srcYUV_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            srcYUV_blk_n <= srcYUV_empty_n;
        else 
            srcYUV_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    srcYUV_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            srcYUV_read <= ap_const_logic_1;
        else 
            srcYUV_read <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln145_1_fu_256_p4 <= srcYUV_dout(15 downto 8);
    trunc_ln145_2_fu_266_p4 <= srcYUV_dout(23 downto 16);
    trunc_ln145_fu_252_p1 <= srcYUV_dout(8 - 1 downto 0);
    trunc_ln167_fu_221_p1 <= ap_sig_allocacmp_x_2(1 - 1 downto 0);
    x_3_fu_241_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_x_2) + unsigned(ap_const_lv16_1));
    xor_ln185_fu_203_p2 <= (or_ln185_1_fu_197_p2 xor ap_const_lv1_1);
end behav;
