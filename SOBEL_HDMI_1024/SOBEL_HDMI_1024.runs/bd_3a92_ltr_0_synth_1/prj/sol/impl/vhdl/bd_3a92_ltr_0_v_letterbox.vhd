-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bd_3a92_ltr_0_v_letterbox is
generic (
    C_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_CTRL_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_WVALID : IN STD_LOGIC;
    s_axi_CTRL_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_RREADY : IN STD_LOGIC;
    s_axi_CTRL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    s_axis_video_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    s_axis_video_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
    s_axis_video_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
    s_axis_video_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    m_axis_video_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axis_video_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axis_video_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TVALID : IN STD_LOGIC;
    s_axis_video_TREADY : OUT STD_LOGIC;
    m_axis_video_TVALID : OUT STD_LOGIC;
    m_axis_video_TREADY : IN STD_LOGIC );
end;


architecture behav of bd_3a92_ltr_0_v_letterbox is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "bd_3a92_ltr_0_v_letterbox,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=5.625000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=5.132000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=826,HLS_SYN_LUT=1619,HLS_VERSION=2022_1}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal width : STD_LOGIC_VECTOR (15 downto 0);
    signal height : STD_LOGIC_VECTOR (15 downto 0);
    signal video_format : STD_LOGIC_VECTOR (15 downto 0);
    signal col_start : STD_LOGIC_VECTOR (15 downto 0);
    signal col_end : STD_LOGIC_VECTOR (15 downto 0);
    signal row_start : STD_LOGIC_VECTOR (15 downto 0);
    signal row_end : STD_LOGIC_VECTOR (15 downto 0);
    signal Y_R_value : STD_LOGIC_VECTOR (15 downto 0);
    signal Cb_G_value : STD_LOGIC_VECTOR (15 downto 0);
    signal Cr_B_value : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal AXIvideo2MultiPixStream_U0_ap_start : STD_LOGIC;
    signal AXIvideo2MultiPixStream_U0_ap_done : STD_LOGIC;
    signal AXIvideo2MultiPixStream_U0_ap_continue : STD_LOGIC;
    signal AXIvideo2MultiPixStream_U0_ap_idle : STD_LOGIC;
    signal AXIvideo2MultiPixStream_U0_ap_ready : STD_LOGIC;
    signal AXIvideo2MultiPixStream_U0_start_out : STD_LOGIC;
    signal AXIvideo2MultiPixStream_U0_start_write : STD_LOGIC;
    signal AXIvideo2MultiPixStream_U0_s_axis_video_TREADY : STD_LOGIC;
    signal AXIvideo2MultiPixStream_U0_srcYUV_din : STD_LOGIC_VECTOR (23 downto 0);
    signal AXIvideo2MultiPixStream_U0_srcYUV_write : STD_LOGIC;
    signal v_letterbox_core_U0_ap_start : STD_LOGIC;
    signal v_letterbox_core_U0_ap_done : STD_LOGIC;
    signal v_letterbox_core_U0_ap_continue : STD_LOGIC;
    signal v_letterbox_core_U0_ap_idle : STD_LOGIC;
    signal v_letterbox_core_U0_ap_ready : STD_LOGIC;
    signal v_letterbox_core_U0_start_out : STD_LOGIC;
    signal v_letterbox_core_U0_start_write : STD_LOGIC;
    signal v_letterbox_core_U0_srcYUV_read : STD_LOGIC;
    signal v_letterbox_core_U0_outYUV_din : STD_LOGIC_VECTOR (23 downto 0);
    signal v_letterbox_core_U0_outYUV_write : STD_LOGIC;
    signal MultiPixStream2AXIvideo_U0_ap_start : STD_LOGIC;
    signal MultiPixStream2AXIvideo_U0_ap_done : STD_LOGIC;
    signal MultiPixStream2AXIvideo_U0_ap_continue : STD_LOGIC;
    signal MultiPixStream2AXIvideo_U0_ap_idle : STD_LOGIC;
    signal MultiPixStream2AXIvideo_U0_ap_ready : STD_LOGIC;
    signal MultiPixStream2AXIvideo_U0_outYUV_read : STD_LOGIC;
    signal MultiPixStream2AXIvideo_U0_m_axis_video_TDATA : STD_LOGIC_VECTOR (23 downto 0);
    signal MultiPixStream2AXIvideo_U0_m_axis_video_TVALID : STD_LOGIC;
    signal MultiPixStream2AXIvideo_U0_m_axis_video_TKEEP : STD_LOGIC_VECTOR (2 downto 0);
    signal MultiPixStream2AXIvideo_U0_m_axis_video_TSTRB : STD_LOGIC_VECTOR (2 downto 0);
    signal MultiPixStream2AXIvideo_U0_m_axis_video_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal MultiPixStream2AXIvideo_U0_m_axis_video_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal MultiPixStream2AXIvideo_U0_m_axis_video_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal MultiPixStream2AXIvideo_U0_m_axis_video_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal srcYUV_full_n : STD_LOGIC;
    signal srcYUV_dout : STD_LOGIC_VECTOR (23 downto 0);
    signal srcYUV_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal srcYUV_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal srcYUV_empty_n : STD_LOGIC;
    signal outYUV_full_n : STD_LOGIC;
    signal outYUV_dout : STD_LOGIC_VECTOR (23 downto 0);
    signal outYUV_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal outYUV_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal outYUV_empty_n : STD_LOGIC;
    signal start_for_v_letterbox_core_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_v_letterbox_core_U0_full_n : STD_LOGIC;
    signal start_for_v_letterbox_core_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_v_letterbox_core_U0_empty_n : STD_LOGIC;
    signal start_for_MultiPixStream2AXIvideo_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_MultiPixStream2AXIvideo_U0_full_n : STD_LOGIC;
    signal start_for_MultiPixStream2AXIvideo_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_MultiPixStream2AXIvideo_U0_empty_n : STD_LOGIC;

    component bd_3a92_ltr_0_AXIvideo2MultiPixStream IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        s_axis_video_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
        s_axis_video_TVALID : IN STD_LOGIC;
        s_axis_video_TREADY : OUT STD_LOGIC;
        s_axis_video_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
        s_axis_video_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
        s_axis_video_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        s_axis_video_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        s_axis_video_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        s_axis_video_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        srcYUV_din : OUT STD_LOGIC_VECTOR (23 downto 0);
        srcYUV_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        srcYUV_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        srcYUV_full_n : IN STD_LOGIC;
        srcYUV_write : OUT STD_LOGIC;
        height : IN STD_LOGIC_VECTOR (15 downto 0);
        width : IN STD_LOGIC_VECTOR (15 downto 0);
        video_format : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component bd_3a92_ltr_0_v_letterbox_core IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        srcYUV_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        srcYUV_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        srcYUV_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        srcYUV_empty_n : IN STD_LOGIC;
        srcYUV_read : OUT STD_LOGIC;
        height : IN STD_LOGIC_VECTOR (15 downto 0);
        width : IN STD_LOGIC_VECTOR (15 downto 0);
        video_format : IN STD_LOGIC_VECTOR (15 downto 0);
        col_start : IN STD_LOGIC_VECTOR (15 downto 0);
        col_end : IN STD_LOGIC_VECTOR (15 downto 0);
        row_start : IN STD_LOGIC_VECTOR (15 downto 0);
        row_end : IN STD_LOGIC_VECTOR (15 downto 0);
        Y_R_value : IN STD_LOGIC_VECTOR (15 downto 0);
        Cb_G_value : IN STD_LOGIC_VECTOR (15 downto 0);
        Cr_B_value : IN STD_LOGIC_VECTOR (15 downto 0);
        outYUV_din : OUT STD_LOGIC_VECTOR (23 downto 0);
        outYUV_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        outYUV_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        outYUV_full_n : IN STD_LOGIC;
        outYUV_write : OUT STD_LOGIC );
    end component;


    component bd_3a92_ltr_0_MultiPixStream2AXIvideo IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        outYUV_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        outYUV_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        outYUV_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        outYUV_empty_n : IN STD_LOGIC;
        outYUV_read : OUT STD_LOGIC;
        m_axis_video_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
        m_axis_video_TVALID : OUT STD_LOGIC;
        m_axis_video_TREADY : IN STD_LOGIC;
        m_axis_video_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axis_video_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axis_video_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axis_video_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axis_video_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axis_video_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
        height : IN STD_LOGIC_VECTOR (15 downto 0);
        width : IN STD_LOGIC_VECTOR (15 downto 0);
        video_format : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component bd_3a92_ltr_0_fifo_w24_d16_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (23 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (23 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (4 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (4 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component bd_3a92_ltr_0_start_for_v_letterbox_core_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component bd_3a92_ltr_0_start_for_MultiPixStream2AXIvideo_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component bd_3a92_ltr_0_CTRL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        width : OUT STD_LOGIC_VECTOR (15 downto 0);
        height : OUT STD_LOGIC_VECTOR (15 downto 0);
        video_format : OUT STD_LOGIC_VECTOR (15 downto 0);
        col_start : OUT STD_LOGIC_VECTOR (15 downto 0);
        col_end : OUT STD_LOGIC_VECTOR (15 downto 0);
        row_start : OUT STD_LOGIC_VECTOR (15 downto 0);
        row_end : OUT STD_LOGIC_VECTOR (15 downto 0);
        Y_R_value : OUT STD_LOGIC_VECTOR (15 downto 0);
        Cb_G_value : OUT STD_LOGIC_VECTOR (15 downto 0);
        Cr_B_value : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    CTRL_s_axi_U : component bd_3a92_ltr_0_CTRL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_AWVALID,
        AWREADY => s_axi_CTRL_AWREADY,
        AWADDR => s_axi_CTRL_AWADDR,
        WVALID => s_axi_CTRL_WVALID,
        WREADY => s_axi_CTRL_WREADY,
        WDATA => s_axi_CTRL_WDATA,
        WSTRB => s_axi_CTRL_WSTRB,
        ARVALID => s_axi_CTRL_ARVALID,
        ARREADY => s_axi_CTRL_ARREADY,
        ARADDR => s_axi_CTRL_ARADDR,
        RVALID => s_axi_CTRL_RVALID,
        RREADY => s_axi_CTRL_RREADY,
        RDATA => s_axi_CTRL_RDATA,
        RRESP => s_axi_CTRL_RRESP,
        BVALID => s_axi_CTRL_BVALID,
        BREADY => s_axi_CTRL_BREADY,
        BRESP => s_axi_CTRL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        width => width,
        height => height,
        video_format => video_format,
        col_start => col_start,
        col_end => col_end,
        row_start => row_start,
        row_end => row_end,
        Y_R_value => Y_R_value,
        Cb_G_value => Cb_G_value,
        Cr_B_value => Cr_B_value,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    AXIvideo2MultiPixStream_U0 : component bd_3a92_ltr_0_AXIvideo2MultiPixStream
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => AXIvideo2MultiPixStream_U0_ap_start,
        start_full_n => start_for_v_letterbox_core_U0_full_n,
        ap_done => AXIvideo2MultiPixStream_U0_ap_done,
        ap_continue => AXIvideo2MultiPixStream_U0_ap_continue,
        ap_idle => AXIvideo2MultiPixStream_U0_ap_idle,
        ap_ready => AXIvideo2MultiPixStream_U0_ap_ready,
        start_out => AXIvideo2MultiPixStream_U0_start_out,
        start_write => AXIvideo2MultiPixStream_U0_start_write,
        s_axis_video_TDATA => s_axis_video_TDATA,
        s_axis_video_TVALID => s_axis_video_TVALID,
        s_axis_video_TREADY => AXIvideo2MultiPixStream_U0_s_axis_video_TREADY,
        s_axis_video_TKEEP => s_axis_video_TKEEP,
        s_axis_video_TSTRB => s_axis_video_TSTRB,
        s_axis_video_TUSER => s_axis_video_TUSER,
        s_axis_video_TLAST => s_axis_video_TLAST,
        s_axis_video_TID => s_axis_video_TID,
        s_axis_video_TDEST => s_axis_video_TDEST,
        srcYUV_din => AXIvideo2MultiPixStream_U0_srcYUV_din,
        srcYUV_num_data_valid => srcYUV_num_data_valid,
        srcYUV_fifo_cap => srcYUV_fifo_cap,
        srcYUV_full_n => srcYUV_full_n,
        srcYUV_write => AXIvideo2MultiPixStream_U0_srcYUV_write,
        height => height,
        width => width,
        video_format => video_format);

    v_letterbox_core_U0 : component bd_3a92_ltr_0_v_letterbox_core
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => v_letterbox_core_U0_ap_start,
        start_full_n => start_for_MultiPixStream2AXIvideo_U0_full_n,
        ap_done => v_letterbox_core_U0_ap_done,
        ap_continue => v_letterbox_core_U0_ap_continue,
        ap_idle => v_letterbox_core_U0_ap_idle,
        ap_ready => v_letterbox_core_U0_ap_ready,
        start_out => v_letterbox_core_U0_start_out,
        start_write => v_letterbox_core_U0_start_write,
        srcYUV_dout => srcYUV_dout,
        srcYUV_num_data_valid => srcYUV_num_data_valid,
        srcYUV_fifo_cap => srcYUV_fifo_cap,
        srcYUV_empty_n => srcYUV_empty_n,
        srcYUV_read => v_letterbox_core_U0_srcYUV_read,
        height => height,
        width => width,
        video_format => video_format,
        col_start => col_start,
        col_end => col_end,
        row_start => row_start,
        row_end => row_end,
        Y_R_value => Y_R_value,
        Cb_G_value => Cb_G_value,
        Cr_B_value => Cr_B_value,
        outYUV_din => v_letterbox_core_U0_outYUV_din,
        outYUV_num_data_valid => outYUV_num_data_valid,
        outYUV_fifo_cap => outYUV_fifo_cap,
        outYUV_full_n => outYUV_full_n,
        outYUV_write => v_letterbox_core_U0_outYUV_write);

    MultiPixStream2AXIvideo_U0 : component bd_3a92_ltr_0_MultiPixStream2AXIvideo
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => MultiPixStream2AXIvideo_U0_ap_start,
        ap_done => MultiPixStream2AXIvideo_U0_ap_done,
        ap_continue => MultiPixStream2AXIvideo_U0_ap_continue,
        ap_idle => MultiPixStream2AXIvideo_U0_ap_idle,
        ap_ready => MultiPixStream2AXIvideo_U0_ap_ready,
        outYUV_dout => outYUV_dout,
        outYUV_num_data_valid => outYUV_num_data_valid,
        outYUV_fifo_cap => outYUV_fifo_cap,
        outYUV_empty_n => outYUV_empty_n,
        outYUV_read => MultiPixStream2AXIvideo_U0_outYUV_read,
        m_axis_video_TDATA => MultiPixStream2AXIvideo_U0_m_axis_video_TDATA,
        m_axis_video_TVALID => MultiPixStream2AXIvideo_U0_m_axis_video_TVALID,
        m_axis_video_TREADY => m_axis_video_TREADY,
        m_axis_video_TKEEP => MultiPixStream2AXIvideo_U0_m_axis_video_TKEEP,
        m_axis_video_TSTRB => MultiPixStream2AXIvideo_U0_m_axis_video_TSTRB,
        m_axis_video_TUSER => MultiPixStream2AXIvideo_U0_m_axis_video_TUSER,
        m_axis_video_TLAST => MultiPixStream2AXIvideo_U0_m_axis_video_TLAST,
        m_axis_video_TID => MultiPixStream2AXIvideo_U0_m_axis_video_TID,
        m_axis_video_TDEST => MultiPixStream2AXIvideo_U0_m_axis_video_TDEST,
        height => height,
        width => width,
        video_format => video_format);

    srcYUV_U : component bd_3a92_ltr_0_fifo_w24_d16_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2MultiPixStream_U0_srcYUV_din,
        if_full_n => srcYUV_full_n,
        if_write => AXIvideo2MultiPixStream_U0_srcYUV_write,
        if_dout => srcYUV_dout,
        if_num_data_valid => srcYUV_num_data_valid,
        if_fifo_cap => srcYUV_fifo_cap,
        if_empty_n => srcYUV_empty_n,
        if_read => v_letterbox_core_U0_srcYUV_read);

    outYUV_U : component bd_3a92_ltr_0_fifo_w24_d16_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => v_letterbox_core_U0_outYUV_din,
        if_full_n => outYUV_full_n,
        if_write => v_letterbox_core_U0_outYUV_write,
        if_dout => outYUV_dout,
        if_num_data_valid => outYUV_num_data_valid,
        if_fifo_cap => outYUV_fifo_cap,
        if_empty_n => outYUV_empty_n,
        if_read => MultiPixStream2AXIvideo_U0_outYUV_read);

    start_for_v_letterbox_core_U0_U : component bd_3a92_ltr_0_start_for_v_letterbox_core_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_v_letterbox_core_U0_din,
        if_full_n => start_for_v_letterbox_core_U0_full_n,
        if_write => AXIvideo2MultiPixStream_U0_start_write,
        if_dout => start_for_v_letterbox_core_U0_dout,
        if_empty_n => start_for_v_letterbox_core_U0_empty_n,
        if_read => v_letterbox_core_U0_ap_ready);

    start_for_MultiPixStream2AXIvideo_U0_U : component bd_3a92_ltr_0_start_for_MultiPixStream2AXIvideo_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_MultiPixStream2AXIvideo_U0_din,
        if_full_n => start_for_MultiPixStream2AXIvideo_U0_full_n,
        if_write => v_letterbox_core_U0_start_write,
        if_dout => start_for_MultiPixStream2AXIvideo_U0_dout,
        if_empty_n => start_for_MultiPixStream2AXIvideo_U0_empty_n,
        if_read => MultiPixStream2AXIvideo_U0_ap_ready);




    AXIvideo2MultiPixStream_U0_ap_continue <= ap_const_logic_1;
    AXIvideo2MultiPixStream_U0_ap_start <= ap_start;
    MultiPixStream2AXIvideo_U0_ap_continue <= ap_const_logic_1;
    MultiPixStream2AXIvideo_U0_ap_start <= start_for_MultiPixStream2AXIvideo_U0_empty_n;
    ap_done <= MultiPixStream2AXIvideo_U0_ap_done;
    ap_idle <= (v_letterbox_core_U0_ap_idle and MultiPixStream2AXIvideo_U0_ap_idle and AXIvideo2MultiPixStream_U0_ap_idle);
    ap_ready <= AXIvideo2MultiPixStream_U0_ap_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    m_axis_video_TDATA <= MultiPixStream2AXIvideo_U0_m_axis_video_TDATA;
    m_axis_video_TDEST <= MultiPixStream2AXIvideo_U0_m_axis_video_TDEST;
    m_axis_video_TID <= MultiPixStream2AXIvideo_U0_m_axis_video_TID;
    m_axis_video_TKEEP <= MultiPixStream2AXIvideo_U0_m_axis_video_TKEEP;
    m_axis_video_TLAST <= MultiPixStream2AXIvideo_U0_m_axis_video_TLAST;
    m_axis_video_TSTRB <= MultiPixStream2AXIvideo_U0_m_axis_video_TSTRB;
    m_axis_video_TUSER <= MultiPixStream2AXIvideo_U0_m_axis_video_TUSER;
    m_axis_video_TVALID <= MultiPixStream2AXIvideo_U0_m_axis_video_TVALID;
    s_axis_video_TREADY <= AXIvideo2MultiPixStream_U0_s_axis_video_TREADY;
    start_for_MultiPixStream2AXIvideo_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_v_letterbox_core_U0_din <= (0=>ap_const_logic_1, others=>'-');
    v_letterbox_core_U0_ap_continue <= ap_const_logic_1;
    v_letterbox_core_U0_ap_start <= start_for_v_letterbox_core_U0_empty_n;
end behav;
