-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bd_3a92_ltr_0_v_letterbox_core is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    srcYUV_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    srcYUV_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    srcYUV_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    srcYUV_empty_n : IN STD_LOGIC;
    srcYUV_read : OUT STD_LOGIC;
    height : IN STD_LOGIC_VECTOR (15 downto 0);
    width : IN STD_LOGIC_VECTOR (15 downto 0);
    video_format : IN STD_LOGIC_VECTOR (15 downto 0);
    col_start : IN STD_LOGIC_VECTOR (15 downto 0);
    col_end : IN STD_LOGIC_VECTOR (15 downto 0);
    row_start : IN STD_LOGIC_VECTOR (15 downto 0);
    row_end : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_R_value : IN STD_LOGIC_VECTOR (15 downto 0);
    Cb_G_value : IN STD_LOGIC_VECTOR (15 downto 0);
    Cr_B_value : IN STD_LOGIC_VECTOR (15 downto 0);
    outYUV_din : OUT STD_LOGIC_VECTOR (23 downto 0);
    outYUV_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    outYUV_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    outYUV_full_n : IN STD_LOGIC;
    outYUV_write : OUT STD_LOGIC );
end;


architecture behav of bd_3a92_ltr_0_v_letterbox_core is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv16_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal height_load_cast_fu_138_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal row_start_load_cast_fu_142_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal row_end_load_cast_fu_146_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal cmp116_fu_154_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_35_fu_164_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal cmp19_not_fu_193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp19_not_reg_279 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln165_fu_188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp22_not_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp22_not_reg_284 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_ap_start : STD_LOGIC;
    signal grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_ap_done : STD_LOGIC;
    signal grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_ap_idle : STD_LOGIC;
    signal grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_ap_ready : STD_LOGIC;
    signal grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_srcYUV_read : STD_LOGIC;
    signal grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_outYUV_din : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_outYUV_write : STD_LOGIC;
    signal grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_p_0_2_0_0_0154 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_conv2_i_i : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_Cb_G_value_load_cast : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal y_fu_56 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_3_fu_203_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal sext_ln165_fu_184_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln165_fu_184_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal y_3_fu_203_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component bd_3a92_ltr_0_v_letterbox_core_Pipeline_VITIS_LOOP_167_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        srcYUV_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        srcYUV_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        srcYUV_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        srcYUV_empty_n : IN STD_LOGIC;
        srcYUV_read : OUT STD_LOGIC;
        outYUV_din : OUT STD_LOGIC_VECTOR (23 downto 0);
        outYUV_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        outYUV_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        outYUV_full_n : IN STD_LOGIC;
        outYUV_write : OUT STD_LOGIC;
        loopWidth : IN STD_LOGIC_VECTOR (15 downto 0);
        loopStart : IN STD_LOGIC_VECTOR (15 downto 0);
        loopEnd : IN STD_LOGIC_VECTOR (15 downto 0);
        cmp116 : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp22_not : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp19_not : IN STD_LOGIC_VECTOR (0 downto 0);
        p_0_2_0_0_0154 : IN STD_LOGIC_VECTOR (7 downto 0);
        conv2_i_i : IN STD_LOGIC_VECTOR (7 downto 0);
        Cb_G_value_load_cast : IN STD_LOGIC_VECTOR (7 downto 0);
        Cr_B_value_load_cast : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120 : component bd_3a92_ltr_0_v_letterbox_core_Pipeline_VITIS_LOOP_167_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_ap_start,
        ap_done => grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_ap_done,
        ap_idle => grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_ap_idle,
        ap_ready => grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_ap_ready,
        srcYUV_dout => srcYUV_dout,
        srcYUV_num_data_valid => ap_const_lv5_0,
        srcYUV_fifo_cap => ap_const_lv5_0,
        srcYUV_empty_n => srcYUV_empty_n,
        srcYUV_read => grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_srcYUV_read,
        outYUV_din => grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_outYUV_din,
        outYUV_num_data_valid => ap_const_lv5_0,
        outYUV_fifo_cap => ap_const_lv5_0,
        outYUV_full_n => outYUV_full_n,
        outYUV_write => grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_outYUV_write,
        loopWidth => width,
        loopStart => col_start,
        loopEnd => col_end,
        cmp116 => cmp116_fu_154_p2,
        cmp22_not => cmp22_not_reg_284,
        cmp19_not => cmp19_not_reg_279,
        p_0_2_0_0_0154 => grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_p_0_2_0_0_0154,
        conv2_i_i => grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_conv2_i_i,
        Cb_G_value_load_cast => grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_Cb_G_value_load_cast,
        Cr_B_value_load_cast => empty_35_fu_164_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln165_fu_188_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_ap_ready = ap_const_logic_1)) then 
                    grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    y_fu_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                y_fu_56 <= ap_const_lv16_1;
            elsif (((icmp_ln165_fu_188_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                y_fu_56 <= y_3_fu_203_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln165_fu_188_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                cmp19_not_reg_279 <= cmp19_not_fu_193_p2;
                cmp22_not_reg_284 <= cmp22_not_fu_198_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln165_fu_188_p2, grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_ap_done, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln165_fu_188_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(real_start, ap_done_reg)
    begin
        if (((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_ap_done)
    begin
        if ((grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, icmp_ln165_fu_188_p2)
    begin
        if (((icmp_ln165_fu_188_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (real_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    cmp116_fu_154_p2 <= "1" when (video_format = ap_const_lv16_2) else "0";
    cmp19_not_fu_193_p2 <= "1" when (signed(sext_ln165_fu_184_p1) < signed(row_start_load_cast_fu_142_p1)) else "0";
    cmp22_not_fu_198_p2 <= "1" when (signed(sext_ln165_fu_184_p1) > signed(row_end_load_cast_fu_146_p1)) else "0";
    empty_35_fu_164_p1 <= Cr_B_value(8 - 1 downto 0);
    grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_Cb_G_value_load_cast <= Cb_G_value(8 - 1 downto 0);
    grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_ap_start <= grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_ap_start_reg;
    grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_conv2_i_i <= Y_R_value(8 - 1 downto 0);
    grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_p_0_2_0_0_0154 <= 
        ap_const_lv8_0 when (cmp116_fu_154_p2(0) = '1') else 
        empty_35_fu_164_p1;
    height_load_cast_fu_138_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(height),17));
    icmp_ln165_fu_188_p2 <= "1" when (signed(sext_ln165_fu_184_p1) > signed(height_load_cast_fu_138_p1)) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln165_fu_188_p2)
    begin
        if (((icmp_ln165_fu_188_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    outYUV_din <= grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_outYUV_din;

    outYUV_write_assign_proc : process(grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_outYUV_write, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            outYUV_write <= grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_outYUV_write;
        else 
            outYUV_write <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    row_end_load_cast_fu_146_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_end),17));
    row_start_load_cast_fu_142_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_start),17));
    sext_ln165_fu_184_p0 <= y_fu_56;
        sext_ln165_fu_184_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln165_fu_184_p0),17));


    srcYUV_read_assign_proc : process(grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_srcYUV_read, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            srcYUV_read <= grp_v_letterbox_core_Pipeline_VITIS_LOOP_167_2_fu_120_srcYUV_read;
        else 
            srcYUV_read <= ap_const_logic_0;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    y_3_fu_203_p0 <= y_fu_56;
    y_3_fu_203_p2 <= std_logic_vector(signed(y_3_fu_203_p0) + signed(ap_const_lv16_1));
end behav;
