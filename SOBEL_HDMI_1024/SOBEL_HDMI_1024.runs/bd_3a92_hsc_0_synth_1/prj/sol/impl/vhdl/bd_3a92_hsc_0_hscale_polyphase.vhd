-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bd_3a92_hsc_0_hscale_polyphase is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    FiltCoeff_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    FiltCoeff_0_ce0 : OUT STD_LOGIC;
    FiltCoeff_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    FiltCoeff_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    FiltCoeff_1_ce0 : OUT STD_LOGIC;
    FiltCoeff_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    FiltCoeff_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    FiltCoeff_2_ce0 : OUT STD_LOGIC;
    FiltCoeff_2_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    FiltCoeff_3_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    FiltCoeff_3_ce0 : OUT STD_LOGIC;
    FiltCoeff_3_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    FiltCoeff_4_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    FiltCoeff_4_ce0 : OUT STD_LOGIC;
    FiltCoeff_4_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    FiltCoeff_5_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    FiltCoeff_5_ce0 : OUT STD_LOGIC;
    FiltCoeff_5_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read8 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read9 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read10 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read11 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read12 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read13 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read14 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read15 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read16 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read17 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read18 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read19 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read20 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read21 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read22 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read23 : IN STD_LOGIC_VECTOR (7 downto 0);
    PhasesH_0_read : IN STD_LOGIC_VECTOR (5 downto 0);
    p_read2425 : IN STD_LOGIC_VECTOR (1 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of bd_3a92_hsc_0_hscale_polyphase is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv24_800 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000100000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal idxprom8_fu_336_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal idxprom8_reg_1046 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal idxprom8_reg_1046_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal idxprom8_reg_1046_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal idxprom8_reg_1046_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal idxprom8_reg_1046_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal idxprom8_reg_1046_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal idxprom8_reg_1046_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal idxprom8_reg_1046_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal idxprom8_reg_1046_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal idxprom8_reg_1046_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal lhs_fu_341_p7 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_reg_1060 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_2_fu_357_p7 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_2_reg_1065 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_2_reg_1065_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_2_reg_1065_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_3_fu_373_p7 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_3_reg_1070 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_3_reg_1070_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_3_reg_1070_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_3_reg_1070_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_3_reg_1070_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_4_fu_389_p7 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_4_reg_1075 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_4_reg_1075_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_4_reg_1075_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_4_reg_1075_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_4_reg_1075_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_4_reg_1075_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_4_reg_1075_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_5_fu_405_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_5_reg_1080 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_5_reg_1080_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_5_reg_1080_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_5_reg_1080_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_5_reg_1080_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_5_reg_1080_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_5_reg_1080_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_5_reg_1080_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_5_reg_1080_pp0_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_6_fu_419_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_6_reg_1085 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_6_reg_1085_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_6_reg_1085_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_6_reg_1085_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_6_reg_1085_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_6_reg_1085_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_6_reg_1085_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_6_reg_1085_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_6_reg_1085_pp0_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_6_reg_1085_pp0_iter9_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_6_reg_1085_pp0_iter10_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_431_p7 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_reg_1090 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_447_p7 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_reg_1095 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_reg_1095_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_reg_1095_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_463_p7 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_reg_1100 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_reg_1100_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_reg_1100_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_reg_1100_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_reg_1100_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_479_p7 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_reg_1105 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_reg_1105_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_reg_1105_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_reg_1105_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_reg_1105_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_reg_1105_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_reg_1105_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_495_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_reg_1110 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_reg_1110_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_reg_1110_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_reg_1110_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_reg_1110_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_reg_1110_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_reg_1110_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_reg_1110_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_reg_1110_pp0_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_509_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_reg_1115 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_reg_1115_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_reg_1115_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_reg_1115_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_reg_1115_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_reg_1115_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_reg_1115_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_reg_1115_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_reg_1115_pp0_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_reg_1115_pp0_iter9_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_reg_1115_pp0_iter10_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_521_p7 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_reg_1120 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_537_p7 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_reg_1125 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_reg_1125_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_reg_1125_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_553_p7 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_reg_1130 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_reg_1130_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_reg_1130_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_reg_1130_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_reg_1130_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_569_p7 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_reg_1135 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_reg_1135_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_reg_1135_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_reg_1135_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_reg_1135_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_reg_1135_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_reg_1135_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_585_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_reg_1140 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_reg_1140_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_reg_1140_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_reg_1140_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_reg_1140_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_reg_1140_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_reg_1140_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_reg_1140_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_reg_1140_pp0_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_fu_599_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_reg_1145 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_reg_1145_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_reg_1145_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_reg_1145_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_reg_1145_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_reg_1145_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_reg_1145_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_reg_1145_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_reg_1145_pp0_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_reg_1145_pp0_iter9_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_reg_1145_pp0_iter10_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1540_fu_614_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1540_1_fu_627_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_902_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sum_18_reg_1204 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_910_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sum_23_reg_1209 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_918_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sum_28_reg_1214 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1540_2_fu_640_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_926_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal sum_19_reg_1261 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_934_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal sum_24_reg_1266 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_942_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal sum_29_reg_1271 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln1540_3_fu_662_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_950_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal sum_20_reg_1318 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_958_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal sum_25_reg_1323 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_966_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal sum_30_reg_1328 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln1540_4_fu_684_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_974_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal sum_21_reg_1360 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_981_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal sum_26_reg_1365 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_988_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal sum_31_reg_1370 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln1540_5_fu_697_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_995_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal sum_22_reg_1412 : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_fu_1003_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal sum_27_reg_1417 : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_fu_1011_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal sum_32_reg_1422 : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_fu_1019_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal sum_reg_1427 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_reg_1432 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln968_fu_732_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln968_reg_1438 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1028_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal sum_11_reg_1443 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_13_reg_1448 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln968_1_fu_754_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln968_1_reg_1454 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1037_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal sum_17_reg_1459 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_15_reg_1464 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln968_2_fu_776_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln968_2_reg_1470 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal p_read2425_cast_fu_326_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal idx_fu_330_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_12_fu_723_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_14_fu_745_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_16_fu_767_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal xor_ln260_fu_791_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln260_fu_804_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln260_3_fu_796_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln4_fu_782_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln260_1_fu_825_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln260_1_fu_838_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln260_4_fu_830_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln260_1_fu_816_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln260_2_fu_859_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln260_2_fu_872_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln260_5_fu_864_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln260_2_fu_850_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln260_fu_808_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln260_1_fu_842_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln260_2_fu_876_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_902_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_902_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_902_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_910_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_910_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_910_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_918_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_918_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_918_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_926_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_926_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_934_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_934_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_942_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_942_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_950_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_950_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_958_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_958_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_966_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_966_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_974_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_974_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_981_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_981_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_988_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_988_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_995_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_995_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1003_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1003_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1011_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1011_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1019_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1019_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1028_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1028_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1037_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1037_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_902_ce : STD_LOGIC;
    signal grp_fu_910_ce : STD_LOGIC;
    signal grp_fu_918_ce : STD_LOGIC;
    signal grp_fu_926_ce : STD_LOGIC;
    signal grp_fu_934_ce : STD_LOGIC;
    signal grp_fu_942_ce : STD_LOGIC;
    signal grp_fu_950_ce : STD_LOGIC;
    signal grp_fu_958_ce : STD_LOGIC;
    signal grp_fu_966_ce : STD_LOGIC;
    signal grp_fu_974_ce : STD_LOGIC;
    signal grp_fu_981_ce : STD_LOGIC;
    signal grp_fu_988_ce : STD_LOGIC;
    signal grp_fu_995_ce : STD_LOGIC;
    signal grp_fu_1003_ce : STD_LOGIC;
    signal grp_fu_1011_ce : STD_LOGIC;
    signal grp_fu_1019_ce : STD_LOGIC;
    signal grp_fu_1028_ce : STD_LOGIC;
    signal grp_fu_1037_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to14 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_1003_p00 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1011_p00 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1019_p00 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1028_p00 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1037_p00 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_902_p00 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_910_p00 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_918_p00 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_926_p00 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_934_p00 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_942_p00 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_950_p00 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_958_p00 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_966_p00 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_974_p00 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_981_p00 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_988_p00 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_995_p00 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component bd_3a92_hsc_0_mux_53_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component bd_3a92_hsc_0_mux_43_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component bd_3a92_hsc_0_mux_33_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component bd_3a92_hsc_0_mac_muladd_8ns_16s_12ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component bd_3a92_hsc_0_mac_muladd_8ns_16s_24s_25_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component bd_3a92_hsc_0_mac_muladd_8ns_16s_25s_26_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (24 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component bd_3a92_hsc_0_mac_muladd_8ns_16s_26s_26_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (25 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component bd_3a92_hsc_0_mac_muladd_8ns_16s_26s_27_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (25 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (26 downto 0) );
    end component;


    component bd_3a92_hsc_0_mac_muladd_8ns_16s_27s_27_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (26 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (26 downto 0) );
    end component;



begin
    mux_53_8_1_1_U96 : component bd_3a92_hsc_0_mux_53_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_0,
        din1 => p_read3,
        din2 => p_read6,
        din3 => p_read9,
        din4 => p_read12,
        din5 => idx_fu_330_p2,
        dout => lhs_fu_341_p7);

    mux_53_8_1_1_U97 : component bd_3a92_hsc_0_mux_53_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_0,
        din1 => p_read6,
        din2 => p_read9,
        din3 => p_read12,
        din4 => p_read15,
        din5 => idx_fu_330_p2,
        dout => lhs_2_fu_357_p7);

    mux_53_8_1_1_U98 : component bd_3a92_hsc_0_mux_53_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_0,
        din1 => p_read9,
        din2 => p_read12,
        din3 => p_read15,
        din4 => p_read18,
        din5 => idx_fu_330_p2,
        dout => lhs_3_fu_373_p7);

    mux_53_8_1_1_U99 : component bd_3a92_hsc_0_mux_53_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_0,
        din1 => p_read12,
        din2 => p_read15,
        din3 => p_read18,
        din4 => p_read21,
        din5 => idx_fu_330_p2,
        dout => lhs_4_fu_389_p7);

    mux_43_8_1_1_U100 : component bd_3a92_hsc_0_mux_43_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_0,
        din1 => p_read15,
        din2 => p_read18,
        din3 => p_read21,
        din4 => idx_fu_330_p2,
        dout => lhs_5_fu_405_p6);

    mux_33_8_1_1_U101 : component bd_3a92_hsc_0_mux_33_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_0,
        din1 => p_read18,
        din2 => p_read21,
        din3 => idx_fu_330_p2,
        dout => lhs_6_fu_419_p5);

    mux_53_8_1_1_U102 : component bd_3a92_hsc_0_mux_53_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_0,
        din1 => p_read4,
        din2 => p_read7,
        din3 => p_read10,
        din4 => p_read13,
        din5 => idx_fu_330_p2,
        dout => tmp_6_fu_431_p7);

    mux_53_8_1_1_U103 : component bd_3a92_hsc_0_mux_53_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_0,
        din1 => p_read7,
        din2 => p_read10,
        din3 => p_read13,
        din4 => p_read16,
        din5 => idx_fu_330_p2,
        dout => tmp_7_fu_447_p7);

    mux_53_8_1_1_U104 : component bd_3a92_hsc_0_mux_53_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_0,
        din1 => p_read10,
        din2 => p_read13,
        din3 => p_read16,
        din4 => p_read19,
        din5 => idx_fu_330_p2,
        dout => tmp_8_fu_463_p7);

    mux_53_8_1_1_U105 : component bd_3a92_hsc_0_mux_53_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_0,
        din1 => p_read13,
        din2 => p_read16,
        din3 => p_read19,
        din4 => p_read22,
        din5 => idx_fu_330_p2,
        dout => tmp_9_fu_479_p7);

    mux_43_8_1_1_U106 : component bd_3a92_hsc_0_mux_43_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_0,
        din1 => p_read16,
        din2 => p_read19,
        din3 => p_read22,
        din4 => idx_fu_330_p2,
        dout => tmp_1_fu_495_p6);

    mux_33_8_1_1_U107 : component bd_3a92_hsc_0_mux_33_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_0,
        din1 => p_read19,
        din2 => p_read22,
        din3 => idx_fu_330_p2,
        dout => tmp_s_fu_509_p5);

    mux_53_8_1_1_U108 : component bd_3a92_hsc_0_mux_53_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_0,
        din1 => p_read5,
        din2 => p_read8,
        din3 => p_read11,
        din4 => p_read14,
        din5 => idx_fu_330_p2,
        dout => tmp_2_fu_521_p7);

    mux_53_8_1_1_U109 : component bd_3a92_hsc_0_mux_53_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_0,
        din1 => p_read8,
        din2 => p_read11,
        din3 => p_read14,
        din4 => p_read17,
        din5 => idx_fu_330_p2,
        dout => tmp_3_fu_537_p7);

    mux_53_8_1_1_U110 : component bd_3a92_hsc_0_mux_53_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_0,
        din1 => p_read11,
        din2 => p_read14,
        din3 => p_read17,
        din4 => p_read20,
        din5 => idx_fu_330_p2,
        dout => tmp_4_fu_553_p7);

    mux_53_8_1_1_U111 : component bd_3a92_hsc_0_mux_53_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_0,
        din1 => p_read14,
        din2 => p_read17,
        din3 => p_read20,
        din4 => p_read23,
        din5 => idx_fu_330_p2,
        dout => tmp_5_fu_569_p7);

    mux_43_8_1_1_U112 : component bd_3a92_hsc_0_mux_43_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_0,
        din1 => p_read17,
        din2 => p_read20,
        din3 => p_read23,
        din4 => idx_fu_330_p2,
        dout => tmp_10_fu_585_p6);

    mux_33_8_1_1_U113 : component bd_3a92_hsc_0_mux_33_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_0,
        din1 => p_read20,
        din2 => p_read23,
        din3 => idx_fu_330_p2,
        dout => tmp_11_fu_599_p5);

    mac_muladd_8ns_16s_12ns_24_4_1_U114 : component bd_3a92_hsc_0_mac_muladd_8ns_16s_12ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 12,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_902_p0,
        din1 => grp_fu_902_p1,
        din2 => grp_fu_902_p2,
        ce => grp_fu_902_ce,
        dout => grp_fu_902_p3);

    mac_muladd_8ns_16s_12ns_24_4_1_U115 : component bd_3a92_hsc_0_mac_muladd_8ns_16s_12ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 12,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_910_p0,
        din1 => grp_fu_910_p1,
        din2 => grp_fu_910_p2,
        ce => grp_fu_910_ce,
        dout => grp_fu_910_p3);

    mac_muladd_8ns_16s_12ns_24_4_1_U116 : component bd_3a92_hsc_0_mac_muladd_8ns_16s_12ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 12,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_918_p0,
        din1 => grp_fu_918_p1,
        din2 => grp_fu_918_p2,
        ce => grp_fu_918_ce,
        dout => grp_fu_918_p3);

    mac_muladd_8ns_16s_24s_25_4_1_U117 : component bd_3a92_hsc_0_mac_muladd_8ns_16s_24s_25_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 25)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_926_p0,
        din1 => grp_fu_926_p1,
        din2 => sum_18_reg_1204,
        ce => grp_fu_926_ce,
        dout => grp_fu_926_p3);

    mac_muladd_8ns_16s_24s_25_4_1_U118 : component bd_3a92_hsc_0_mac_muladd_8ns_16s_24s_25_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 25)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_934_p0,
        din1 => grp_fu_934_p1,
        din2 => sum_23_reg_1209,
        ce => grp_fu_934_ce,
        dout => grp_fu_934_p3);

    mac_muladd_8ns_16s_24s_25_4_1_U119 : component bd_3a92_hsc_0_mac_muladd_8ns_16s_24s_25_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 25)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_942_p0,
        din1 => grp_fu_942_p1,
        din2 => sum_28_reg_1214,
        ce => grp_fu_942_ce,
        dout => grp_fu_942_p3);

    mac_muladd_8ns_16s_25s_26_4_1_U120 : component bd_3a92_hsc_0_mac_muladd_8ns_16s_25s_26_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 25,
        dout_WIDTH => 26)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_950_p0,
        din1 => grp_fu_950_p1,
        din2 => sum_19_reg_1261,
        ce => grp_fu_950_ce,
        dout => grp_fu_950_p3);

    mac_muladd_8ns_16s_25s_26_4_1_U121 : component bd_3a92_hsc_0_mac_muladd_8ns_16s_25s_26_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 25,
        dout_WIDTH => 26)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_958_p0,
        din1 => grp_fu_958_p1,
        din2 => sum_24_reg_1266,
        ce => grp_fu_958_ce,
        dout => grp_fu_958_p3);

    mac_muladd_8ns_16s_25s_26_4_1_U122 : component bd_3a92_hsc_0_mac_muladd_8ns_16s_25s_26_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 25,
        dout_WIDTH => 26)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_966_p0,
        din1 => grp_fu_966_p1,
        din2 => sum_29_reg_1271,
        ce => grp_fu_966_ce,
        dout => grp_fu_966_p3);

    mac_muladd_8ns_16s_26s_26_4_1_U123 : component bd_3a92_hsc_0_mac_muladd_8ns_16s_26s_26_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 26,
        dout_WIDTH => 26)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_974_p0,
        din1 => grp_fu_974_p1,
        din2 => sum_20_reg_1318,
        ce => grp_fu_974_ce,
        dout => grp_fu_974_p3);

    mac_muladd_8ns_16s_26s_26_4_1_U124 : component bd_3a92_hsc_0_mac_muladd_8ns_16s_26s_26_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 26,
        dout_WIDTH => 26)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_981_p0,
        din1 => grp_fu_981_p1,
        din2 => sum_25_reg_1323,
        ce => grp_fu_981_ce,
        dout => grp_fu_981_p3);

    mac_muladd_8ns_16s_26s_26_4_1_U125 : component bd_3a92_hsc_0_mac_muladd_8ns_16s_26s_26_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 26,
        dout_WIDTH => 26)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_988_p0,
        din1 => grp_fu_988_p1,
        din2 => sum_30_reg_1328,
        ce => grp_fu_988_ce,
        dout => grp_fu_988_p3);

    mac_muladd_8ns_16s_26s_27_4_1_U126 : component bd_3a92_hsc_0_mac_muladd_8ns_16s_26s_27_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 26,
        dout_WIDTH => 27)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_995_p0,
        din1 => grp_fu_995_p1,
        din2 => sum_21_reg_1360,
        ce => grp_fu_995_ce,
        dout => grp_fu_995_p3);

    mac_muladd_8ns_16s_26s_27_4_1_U127 : component bd_3a92_hsc_0_mac_muladd_8ns_16s_26s_27_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 26,
        dout_WIDTH => 27)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1003_p0,
        din1 => grp_fu_1003_p1,
        din2 => sum_26_reg_1365,
        ce => grp_fu_1003_ce,
        dout => grp_fu_1003_p3);

    mac_muladd_8ns_16s_26s_27_4_1_U128 : component bd_3a92_hsc_0_mac_muladd_8ns_16s_26s_27_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 26,
        dout_WIDTH => 27)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1011_p0,
        din1 => grp_fu_1011_p1,
        din2 => sum_31_reg_1370,
        ce => grp_fu_1011_ce,
        dout => grp_fu_1011_p3);

    mac_muladd_8ns_16s_27s_27_4_1_U129 : component bd_3a92_hsc_0_mac_muladd_8ns_16s_27s_27_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 27,
        dout_WIDTH => 27)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1019_p0,
        din1 => grp_fu_1019_p1,
        din2 => sum_22_reg_1412,
        ce => grp_fu_1019_ce,
        dout => grp_fu_1019_p3);

    mac_muladd_8ns_16s_27s_27_4_1_U130 : component bd_3a92_hsc_0_mac_muladd_8ns_16s_27s_27_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 27,
        dout_WIDTH => 27)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1028_p0,
        din1 => grp_fu_1028_p1,
        din2 => sum_27_reg_1417,
        ce => grp_fu_1028_ce,
        dout => grp_fu_1028_p3);

    mac_muladd_8ns_16s_27s_27_4_1_U131 : component bd_3a92_hsc_0_mac_muladd_8ns_16s_27s_27_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 27,
        dout_WIDTH => 27)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1037_p0,
        din1 => grp_fu_1037_p1,
        din2 => sum_32_reg_1422,
        ce => grp_fu_1037_ce,
        dout => grp_fu_1037_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then
                icmp_ln968_1_reg_1454 <= icmp_ln968_1_fu_754_p2;
                icmp_ln968_2_reg_1470 <= icmp_ln968_2_fu_776_p2;
                icmp_ln968_reg_1438 <= icmp_ln968_fu_732_p2;
                    idxprom8_reg_1046_pp0_iter2_reg(5 downto 0) <= idxprom8_reg_1046_pp0_iter1_reg(5 downto 0);
                    idxprom8_reg_1046_pp0_iter3_reg(5 downto 0) <= idxprom8_reg_1046_pp0_iter2_reg(5 downto 0);
                    idxprom8_reg_1046_pp0_iter4_reg(5 downto 0) <= idxprom8_reg_1046_pp0_iter3_reg(5 downto 0);
                    idxprom8_reg_1046_pp0_iter5_reg(5 downto 0) <= idxprom8_reg_1046_pp0_iter4_reg(5 downto 0);
                    idxprom8_reg_1046_pp0_iter6_reg(5 downto 0) <= idxprom8_reg_1046_pp0_iter5_reg(5 downto 0);
                    idxprom8_reg_1046_pp0_iter7_reg(5 downto 0) <= idxprom8_reg_1046_pp0_iter6_reg(5 downto 0);
                    idxprom8_reg_1046_pp0_iter8_reg(5 downto 0) <= idxprom8_reg_1046_pp0_iter7_reg(5 downto 0);
                    idxprom8_reg_1046_pp0_iter9_reg(5 downto 0) <= idxprom8_reg_1046_pp0_iter8_reg(5 downto 0);
                lhs_2_reg_1065_pp0_iter2_reg <= lhs_2_reg_1065_pp0_iter1_reg;
                lhs_3_reg_1070_pp0_iter2_reg <= lhs_3_reg_1070_pp0_iter1_reg;
                lhs_3_reg_1070_pp0_iter3_reg <= lhs_3_reg_1070_pp0_iter2_reg;
                lhs_3_reg_1070_pp0_iter4_reg <= lhs_3_reg_1070_pp0_iter3_reg;
                lhs_4_reg_1075_pp0_iter2_reg <= lhs_4_reg_1075_pp0_iter1_reg;
                lhs_4_reg_1075_pp0_iter3_reg <= lhs_4_reg_1075_pp0_iter2_reg;
                lhs_4_reg_1075_pp0_iter4_reg <= lhs_4_reg_1075_pp0_iter3_reg;
                lhs_4_reg_1075_pp0_iter5_reg <= lhs_4_reg_1075_pp0_iter4_reg;
                lhs_4_reg_1075_pp0_iter6_reg <= lhs_4_reg_1075_pp0_iter5_reg;
                lhs_5_reg_1080_pp0_iter2_reg <= lhs_5_reg_1080_pp0_iter1_reg;
                lhs_5_reg_1080_pp0_iter3_reg <= lhs_5_reg_1080_pp0_iter2_reg;
                lhs_5_reg_1080_pp0_iter4_reg <= lhs_5_reg_1080_pp0_iter3_reg;
                lhs_5_reg_1080_pp0_iter5_reg <= lhs_5_reg_1080_pp0_iter4_reg;
                lhs_5_reg_1080_pp0_iter6_reg <= lhs_5_reg_1080_pp0_iter5_reg;
                lhs_5_reg_1080_pp0_iter7_reg <= lhs_5_reg_1080_pp0_iter6_reg;
                lhs_5_reg_1080_pp0_iter8_reg <= lhs_5_reg_1080_pp0_iter7_reg;
                lhs_6_reg_1085_pp0_iter10_reg <= lhs_6_reg_1085_pp0_iter9_reg;
                lhs_6_reg_1085_pp0_iter2_reg <= lhs_6_reg_1085_pp0_iter1_reg;
                lhs_6_reg_1085_pp0_iter3_reg <= lhs_6_reg_1085_pp0_iter2_reg;
                lhs_6_reg_1085_pp0_iter4_reg <= lhs_6_reg_1085_pp0_iter3_reg;
                lhs_6_reg_1085_pp0_iter5_reg <= lhs_6_reg_1085_pp0_iter4_reg;
                lhs_6_reg_1085_pp0_iter6_reg <= lhs_6_reg_1085_pp0_iter5_reg;
                lhs_6_reg_1085_pp0_iter7_reg <= lhs_6_reg_1085_pp0_iter6_reg;
                lhs_6_reg_1085_pp0_iter8_reg <= lhs_6_reg_1085_pp0_iter7_reg;
                lhs_6_reg_1085_pp0_iter9_reg <= lhs_6_reg_1085_pp0_iter8_reg;
                tmp_10_reg_1140_pp0_iter2_reg <= tmp_10_reg_1140_pp0_iter1_reg;
                tmp_10_reg_1140_pp0_iter3_reg <= tmp_10_reg_1140_pp0_iter2_reg;
                tmp_10_reg_1140_pp0_iter4_reg <= tmp_10_reg_1140_pp0_iter3_reg;
                tmp_10_reg_1140_pp0_iter5_reg <= tmp_10_reg_1140_pp0_iter4_reg;
                tmp_10_reg_1140_pp0_iter6_reg <= tmp_10_reg_1140_pp0_iter5_reg;
                tmp_10_reg_1140_pp0_iter7_reg <= tmp_10_reg_1140_pp0_iter6_reg;
                tmp_10_reg_1140_pp0_iter8_reg <= tmp_10_reg_1140_pp0_iter7_reg;
                tmp_11_reg_1145_pp0_iter10_reg <= tmp_11_reg_1145_pp0_iter9_reg;
                tmp_11_reg_1145_pp0_iter2_reg <= tmp_11_reg_1145_pp0_iter1_reg;
                tmp_11_reg_1145_pp0_iter3_reg <= tmp_11_reg_1145_pp0_iter2_reg;
                tmp_11_reg_1145_pp0_iter4_reg <= tmp_11_reg_1145_pp0_iter3_reg;
                tmp_11_reg_1145_pp0_iter5_reg <= tmp_11_reg_1145_pp0_iter4_reg;
                tmp_11_reg_1145_pp0_iter6_reg <= tmp_11_reg_1145_pp0_iter5_reg;
                tmp_11_reg_1145_pp0_iter7_reg <= tmp_11_reg_1145_pp0_iter6_reg;
                tmp_11_reg_1145_pp0_iter8_reg <= tmp_11_reg_1145_pp0_iter7_reg;
                tmp_11_reg_1145_pp0_iter9_reg <= tmp_11_reg_1145_pp0_iter8_reg;
                tmp_13_reg_1448 <= grp_fu_1028_p3(26 downto 26);
                tmp_15_reg_1464 <= grp_fu_1037_p3(26 downto 26);
                tmp_1_reg_1110_pp0_iter2_reg <= tmp_1_reg_1110_pp0_iter1_reg;
                tmp_1_reg_1110_pp0_iter3_reg <= tmp_1_reg_1110_pp0_iter2_reg;
                tmp_1_reg_1110_pp0_iter4_reg <= tmp_1_reg_1110_pp0_iter3_reg;
                tmp_1_reg_1110_pp0_iter5_reg <= tmp_1_reg_1110_pp0_iter4_reg;
                tmp_1_reg_1110_pp0_iter6_reg <= tmp_1_reg_1110_pp0_iter5_reg;
                tmp_1_reg_1110_pp0_iter7_reg <= tmp_1_reg_1110_pp0_iter6_reg;
                tmp_1_reg_1110_pp0_iter8_reg <= tmp_1_reg_1110_pp0_iter7_reg;
                tmp_3_reg_1125_pp0_iter2_reg <= tmp_3_reg_1125_pp0_iter1_reg;
                tmp_4_reg_1130_pp0_iter2_reg <= tmp_4_reg_1130_pp0_iter1_reg;
                tmp_4_reg_1130_pp0_iter3_reg <= tmp_4_reg_1130_pp0_iter2_reg;
                tmp_4_reg_1130_pp0_iter4_reg <= tmp_4_reg_1130_pp0_iter3_reg;
                tmp_5_reg_1135_pp0_iter2_reg <= tmp_5_reg_1135_pp0_iter1_reg;
                tmp_5_reg_1135_pp0_iter3_reg <= tmp_5_reg_1135_pp0_iter2_reg;
                tmp_5_reg_1135_pp0_iter4_reg <= tmp_5_reg_1135_pp0_iter3_reg;
                tmp_5_reg_1135_pp0_iter5_reg <= tmp_5_reg_1135_pp0_iter4_reg;
                tmp_5_reg_1135_pp0_iter6_reg <= tmp_5_reg_1135_pp0_iter5_reg;
                tmp_7_reg_1095_pp0_iter2_reg <= tmp_7_reg_1095_pp0_iter1_reg;
                tmp_8_reg_1100_pp0_iter2_reg <= tmp_8_reg_1100_pp0_iter1_reg;
                tmp_8_reg_1100_pp0_iter3_reg <= tmp_8_reg_1100_pp0_iter2_reg;
                tmp_8_reg_1100_pp0_iter4_reg <= tmp_8_reg_1100_pp0_iter3_reg;
                tmp_9_reg_1105_pp0_iter2_reg <= tmp_9_reg_1105_pp0_iter1_reg;
                tmp_9_reg_1105_pp0_iter3_reg <= tmp_9_reg_1105_pp0_iter2_reg;
                tmp_9_reg_1105_pp0_iter4_reg <= tmp_9_reg_1105_pp0_iter3_reg;
                tmp_9_reg_1105_pp0_iter5_reg <= tmp_9_reg_1105_pp0_iter4_reg;
                tmp_9_reg_1105_pp0_iter6_reg <= tmp_9_reg_1105_pp0_iter5_reg;
                tmp_reg_1432 <= grp_fu_1019_p3(26 downto 26);
                tmp_s_reg_1115_pp0_iter10_reg <= tmp_s_reg_1115_pp0_iter9_reg;
                tmp_s_reg_1115_pp0_iter2_reg <= tmp_s_reg_1115_pp0_iter1_reg;
                tmp_s_reg_1115_pp0_iter3_reg <= tmp_s_reg_1115_pp0_iter2_reg;
                tmp_s_reg_1115_pp0_iter4_reg <= tmp_s_reg_1115_pp0_iter3_reg;
                tmp_s_reg_1115_pp0_iter5_reg <= tmp_s_reg_1115_pp0_iter4_reg;
                tmp_s_reg_1115_pp0_iter6_reg <= tmp_s_reg_1115_pp0_iter5_reg;
                tmp_s_reg_1115_pp0_iter7_reg <= tmp_s_reg_1115_pp0_iter6_reg;
                tmp_s_reg_1115_pp0_iter8_reg <= tmp_s_reg_1115_pp0_iter7_reg;
                tmp_s_reg_1115_pp0_iter9_reg <= tmp_s_reg_1115_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    idxprom8_reg_1046(5 downto 0) <= idxprom8_fu_336_p1(5 downto 0);
                    idxprom8_reg_1046_pp0_iter1_reg(5 downto 0) <= idxprom8_reg_1046(5 downto 0);
                lhs_2_reg_1065 <= lhs_2_fu_357_p7;
                lhs_2_reg_1065_pp0_iter1_reg <= lhs_2_reg_1065;
                lhs_3_reg_1070 <= lhs_3_fu_373_p7;
                lhs_3_reg_1070_pp0_iter1_reg <= lhs_3_reg_1070;
                lhs_4_reg_1075 <= lhs_4_fu_389_p7;
                lhs_4_reg_1075_pp0_iter1_reg <= lhs_4_reg_1075;
                lhs_5_reg_1080 <= lhs_5_fu_405_p6;
                lhs_5_reg_1080_pp0_iter1_reg <= lhs_5_reg_1080;
                lhs_6_reg_1085 <= lhs_6_fu_419_p5;
                lhs_6_reg_1085_pp0_iter1_reg <= lhs_6_reg_1085;
                lhs_reg_1060 <= lhs_fu_341_p7;
                tmp_10_reg_1140 <= tmp_10_fu_585_p6;
                tmp_10_reg_1140_pp0_iter1_reg <= tmp_10_reg_1140;
                tmp_11_reg_1145 <= tmp_11_fu_599_p5;
                tmp_11_reg_1145_pp0_iter1_reg <= tmp_11_reg_1145;
                tmp_1_reg_1110 <= tmp_1_fu_495_p6;
                tmp_1_reg_1110_pp0_iter1_reg <= tmp_1_reg_1110;
                tmp_2_reg_1120 <= tmp_2_fu_521_p7;
                tmp_3_reg_1125 <= tmp_3_fu_537_p7;
                tmp_3_reg_1125_pp0_iter1_reg <= tmp_3_reg_1125;
                tmp_4_reg_1130 <= tmp_4_fu_553_p7;
                tmp_4_reg_1130_pp0_iter1_reg <= tmp_4_reg_1130;
                tmp_5_reg_1135 <= tmp_5_fu_569_p7;
                tmp_5_reg_1135_pp0_iter1_reg <= tmp_5_reg_1135;
                tmp_6_reg_1090 <= tmp_6_fu_431_p7;
                tmp_7_reg_1095 <= tmp_7_fu_447_p7;
                tmp_7_reg_1095_pp0_iter1_reg <= tmp_7_reg_1095;
                tmp_8_reg_1100 <= tmp_8_fu_463_p7;
                tmp_8_reg_1100_pp0_iter1_reg <= tmp_8_reg_1100;
                tmp_9_reg_1105 <= tmp_9_fu_479_p7;
                tmp_9_reg_1105_pp0_iter1_reg <= tmp_9_reg_1105;
                tmp_s_reg_1115 <= tmp_s_fu_509_p5;
                tmp_s_reg_1115_pp0_iter1_reg <= tmp_s_reg_1115;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then
                sum_11_reg_1443 <= grp_fu_1028_p3;
                sum_17_reg_1459 <= grp_fu_1037_p3;
                sum_reg_1427 <= grp_fu_1019_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then
                sum_18_reg_1204 <= grp_fu_902_p3;
                sum_23_reg_1209 <= grp_fu_910_p3;
                sum_28_reg_1214 <= grp_fu_918_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then
                sum_19_reg_1261 <= grp_fu_926_p3;
                sum_24_reg_1266 <= grp_fu_934_p3;
                sum_29_reg_1271 <= grp_fu_942_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then
                sum_20_reg_1318 <= grp_fu_950_p3;
                sum_25_reg_1323 <= grp_fu_958_p3;
                sum_30_reg_1328 <= grp_fu_966_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then
                sum_21_reg_1360 <= grp_fu_974_p3;
                sum_26_reg_1365 <= grp_fu_981_p3;
                sum_31_reg_1370 <= grp_fu_988_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then
                sum_22_reg_1412 <= grp_fu_995_p3;
                sum_27_reg_1417 <= grp_fu_1003_p3;
                sum_32_reg_1422 <= grp_fu_1011_p3;
            end if;
        end if;
    end process;
    idxprom8_reg_1046(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    idxprom8_reg_1046_pp0_iter1_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    idxprom8_reg_1046_pp0_iter2_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    idxprom8_reg_1046_pp0_iter3_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    idxprom8_reg_1046_pp0_iter4_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    idxprom8_reg_1046_pp0_iter5_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    idxprom8_reg_1046_pp0_iter6_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    idxprom8_reg_1046_pp0_iter7_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    idxprom8_reg_1046_pp0_iter8_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    idxprom8_reg_1046_pp0_iter9_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    FiltCoeff_0_address0 <= idxprom8_fu_336_p1(6 - 1 downto 0);

    FiltCoeff_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            FiltCoeff_0_ce0 <= ap_const_logic_1;
        else 
            FiltCoeff_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    FiltCoeff_1_address0 <= idxprom8_reg_1046_pp0_iter1_reg(6 - 1 downto 0);

    FiltCoeff_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then 
            FiltCoeff_1_ce0 <= ap_const_logic_1;
        else 
            FiltCoeff_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    FiltCoeff_2_address0 <= idxprom8_reg_1046_pp0_iter3_reg(6 - 1 downto 0);

    FiltCoeff_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then 
            FiltCoeff_2_ce0 <= ap_const_logic_1;
        else 
            FiltCoeff_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    FiltCoeff_3_address0 <= idxprom8_reg_1046_pp0_iter5_reg(6 - 1 downto 0);

    FiltCoeff_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then 
            FiltCoeff_3_ce0 <= ap_const_logic_1;
        else 
            FiltCoeff_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    FiltCoeff_4_address0 <= idxprom8_reg_1046_pp0_iter7_reg(6 - 1 downto 0);

    FiltCoeff_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then 
            FiltCoeff_4_ce0 <= ap_const_logic_1;
        else 
            FiltCoeff_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    FiltCoeff_5_address0 <= idxprom8_reg_1046_pp0_iter9_reg(6 - 1 downto 0);

    FiltCoeff_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then 
            FiltCoeff_5_ce0 <= ap_const_logic_1;
        else 
            FiltCoeff_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter15, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to14_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to14 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to14 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to14)
    begin
        if (((ap_idle_pp0_0to14 = ap_const_logic_1) and (ap_start = ap_const_logic_0))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= select_ln260_fu_808_p3;
    ap_return_1 <= select_ln260_1_fu_842_p3;
    ap_return_2 <= select_ln260_2_fu_876_p3;

    grp_fu_1003_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1003_ce <= ap_const_logic_1;
        else 
            grp_fu_1003_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1003_p0 <= grp_fu_1003_p00(8 - 1 downto 0);
    grp_fu_1003_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_reg_1110_pp0_iter8_reg),24));
    grp_fu_1003_p1 <= sext_ln1540_4_fu_684_p1(16 - 1 downto 0);

    grp_fu_1011_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1011_ce <= ap_const_logic_1;
        else 
            grp_fu_1011_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1011_p0 <= grp_fu_1011_p00(8 - 1 downto 0);
    grp_fu_1011_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_reg_1140_pp0_iter8_reg),24));
    grp_fu_1011_p1 <= sext_ln1540_4_fu_684_p1(16 - 1 downto 0);

    grp_fu_1019_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1019_ce <= ap_const_logic_1;
        else 
            grp_fu_1019_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1019_p0 <= grp_fu_1019_p00(8 - 1 downto 0);
    grp_fu_1019_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_6_reg_1085_pp0_iter10_reg),24));
    grp_fu_1019_p1 <= sext_ln1540_5_fu_697_p1(16 - 1 downto 0);

    grp_fu_1028_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1028_ce <= ap_const_logic_1;
        else 
            grp_fu_1028_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1028_p0 <= grp_fu_1028_p00(8 - 1 downto 0);
    grp_fu_1028_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_reg_1115_pp0_iter10_reg),24));
    grp_fu_1028_p1 <= sext_ln1540_5_fu_697_p1(16 - 1 downto 0);

    grp_fu_1037_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1037_ce <= ap_const_logic_1;
        else 
            grp_fu_1037_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1037_p0 <= grp_fu_1037_p00(8 - 1 downto 0);
    grp_fu_1037_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_reg_1145_pp0_iter10_reg),24));
    grp_fu_1037_p1 <= sext_ln1540_5_fu_697_p1(16 - 1 downto 0);

    grp_fu_902_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_902_ce <= ap_const_logic_1;
        else 
            grp_fu_902_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_902_p0 <= grp_fu_902_p00(8 - 1 downto 0);
    grp_fu_902_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_reg_1060),24));
    grp_fu_902_p1 <= sext_ln1540_fu_614_p1(16 - 1 downto 0);
    grp_fu_902_p2 <= ap_const_lv24_800(12 - 1 downto 0);

    grp_fu_910_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_910_ce <= ap_const_logic_1;
        else 
            grp_fu_910_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_910_p0 <= grp_fu_910_p00(8 - 1 downto 0);
    grp_fu_910_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_reg_1090),24));
    grp_fu_910_p1 <= sext_ln1540_fu_614_p1(16 - 1 downto 0);
    grp_fu_910_p2 <= ap_const_lv24_800(12 - 1 downto 0);

    grp_fu_918_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_918_ce <= ap_const_logic_1;
        else 
            grp_fu_918_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_918_p0 <= grp_fu_918_p00(8 - 1 downto 0);
    grp_fu_918_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_reg_1120),24));
    grp_fu_918_p1 <= sext_ln1540_fu_614_p1(16 - 1 downto 0);
    grp_fu_918_p2 <= ap_const_lv24_800(12 - 1 downto 0);

    grp_fu_926_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_926_ce <= ap_const_logic_1;
        else 
            grp_fu_926_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_926_p0 <= grp_fu_926_p00(8 - 1 downto 0);
    grp_fu_926_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_2_reg_1065_pp0_iter2_reg),24));
    grp_fu_926_p1 <= sext_ln1540_1_fu_627_p1(16 - 1 downto 0);

    grp_fu_934_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_934_ce <= ap_const_logic_1;
        else 
            grp_fu_934_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_934_p0 <= grp_fu_934_p00(8 - 1 downto 0);
    grp_fu_934_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_reg_1095_pp0_iter2_reg),24));
    grp_fu_934_p1 <= sext_ln1540_1_fu_627_p1(16 - 1 downto 0);

    grp_fu_942_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_942_ce <= ap_const_logic_1;
        else 
            grp_fu_942_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_942_p0 <= grp_fu_942_p00(8 - 1 downto 0);
    grp_fu_942_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_reg_1125_pp0_iter2_reg),24));
    grp_fu_942_p1 <= sext_ln1540_1_fu_627_p1(16 - 1 downto 0);

    grp_fu_950_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_950_ce <= ap_const_logic_1;
        else 
            grp_fu_950_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_950_p0 <= grp_fu_950_p00(8 - 1 downto 0);
    grp_fu_950_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_3_reg_1070_pp0_iter4_reg),24));
    grp_fu_950_p1 <= sext_ln1540_2_fu_640_p1(16 - 1 downto 0);

    grp_fu_958_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_958_ce <= ap_const_logic_1;
        else 
            grp_fu_958_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_958_p0 <= grp_fu_958_p00(8 - 1 downto 0);
    grp_fu_958_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_reg_1100_pp0_iter4_reg),24));
    grp_fu_958_p1 <= sext_ln1540_2_fu_640_p1(16 - 1 downto 0);

    grp_fu_966_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_966_ce <= ap_const_logic_1;
        else 
            grp_fu_966_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_966_p0 <= grp_fu_966_p00(8 - 1 downto 0);
    grp_fu_966_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_reg_1130_pp0_iter4_reg),24));
    grp_fu_966_p1 <= sext_ln1540_2_fu_640_p1(16 - 1 downto 0);

    grp_fu_974_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_974_ce <= ap_const_logic_1;
        else 
            grp_fu_974_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_974_p0 <= grp_fu_974_p00(8 - 1 downto 0);
    grp_fu_974_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_4_reg_1075_pp0_iter6_reg),24));
    grp_fu_974_p1 <= sext_ln1540_3_fu_662_p1(16 - 1 downto 0);

    grp_fu_981_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_981_ce <= ap_const_logic_1;
        else 
            grp_fu_981_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_981_p0 <= grp_fu_981_p00(8 - 1 downto 0);
    grp_fu_981_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_reg_1105_pp0_iter6_reg),24));
    grp_fu_981_p1 <= sext_ln1540_3_fu_662_p1(16 - 1 downto 0);

    grp_fu_988_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_988_ce <= ap_const_logic_1;
        else 
            grp_fu_988_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_988_p0 <= grp_fu_988_p00(8 - 1 downto 0);
    grp_fu_988_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_reg_1135_pp0_iter6_reg),24));
    grp_fu_988_p1 <= sext_ln1540_3_fu_662_p1(16 - 1 downto 0);

    grp_fu_995_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_995_ce <= ap_const_logic_1;
        else 
            grp_fu_995_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_995_p0 <= grp_fu_995_p00(8 - 1 downto 0);
    grp_fu_995_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_5_reg_1080_pp0_iter8_reg),24));
    grp_fu_995_p1 <= sext_ln1540_4_fu_684_p1(16 - 1 downto 0);
    icmp_ln968_1_fu_754_p2 <= "1" when (signed(tmp_14_fu_745_p4) > signed(ap_const_lv7_0)) else "0";
    icmp_ln968_2_fu_776_p2 <= "1" when (signed(tmp_16_fu_767_p4) > signed(ap_const_lv7_0)) else "0";
    icmp_ln968_fu_732_p2 <= "1" when (signed(tmp_12_fu_723_p4) > signed(ap_const_lv7_0)) else "0";
    idx_fu_330_p2 <= std_logic_vector(unsigned(p_read2425_cast_fu_326_p1) + unsigned(ap_const_lv3_1));
    idxprom8_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(PhasesH_0_read),64));
    or_ln260_1_fu_838_p2 <= (tmp_13_reg_1448 or icmp_ln968_1_reg_1454);
    or_ln260_2_fu_872_p2 <= (tmp_15_reg_1464 or icmp_ln968_2_reg_1470);
    or_ln260_fu_804_p2 <= (tmp_reg_1432 or icmp_ln968_reg_1438);
    p_read2425_cast_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read2425),3));
    select_ln260_1_fu_842_p3 <= 
        select_ln260_4_fu_830_p3 when (or_ln260_1_fu_838_p2(0) = '1') else 
        trunc_ln260_1_fu_816_p4;
    select_ln260_2_fu_876_p3 <= 
        select_ln260_5_fu_864_p3 when (or_ln260_2_fu_872_p2(0) = '1') else 
        trunc_ln260_2_fu_850_p4;
    select_ln260_3_fu_796_p3 <= 
        ap_const_lv8_FF when (xor_ln260_fu_791_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln260_4_fu_830_p3 <= 
        ap_const_lv8_FF when (xor_ln260_1_fu_825_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln260_5_fu_864_p3 <= 
        ap_const_lv8_FF when (xor_ln260_2_fu_859_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln260_fu_808_p3 <= 
        select_ln260_3_fu_796_p3 when (or_ln260_fu_804_p2(0) = '1') else 
        trunc_ln4_fu_782_p4;
        sext_ln1540_1_fu_627_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(FiltCoeff_1_q0),24));

        sext_ln1540_2_fu_640_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(FiltCoeff_2_q0),24));

        sext_ln1540_3_fu_662_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(FiltCoeff_3_q0),24));

        sext_ln1540_4_fu_684_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(FiltCoeff_4_q0),24));

        sext_ln1540_5_fu_697_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(FiltCoeff_5_q0),24));

        sext_ln1540_fu_614_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(FiltCoeff_0_q0),24));

    tmp_12_fu_723_p4 <= grp_fu_1019_p3(26 downto 20);
    tmp_14_fu_745_p4 <= grp_fu_1028_p3(26 downto 20);
    tmp_16_fu_767_p4 <= grp_fu_1037_p3(26 downto 20);
    trunc_ln260_1_fu_816_p4 <= sum_11_reg_1443(19 downto 12);
    trunc_ln260_2_fu_850_p4 <= sum_17_reg_1459(19 downto 12);
    trunc_ln4_fu_782_p4 <= sum_reg_1427(19 downto 12);
    xor_ln260_1_fu_825_p2 <= (tmp_13_reg_1448 xor ap_const_lv1_1);
    xor_ln260_2_fu_859_p2 <= (tmp_15_reg_1464 xor ap_const_lv1_1);
    xor_ln260_fu_791_p2 <= (tmp_reg_1432 xor ap_const_lv1_1);
end behav;
