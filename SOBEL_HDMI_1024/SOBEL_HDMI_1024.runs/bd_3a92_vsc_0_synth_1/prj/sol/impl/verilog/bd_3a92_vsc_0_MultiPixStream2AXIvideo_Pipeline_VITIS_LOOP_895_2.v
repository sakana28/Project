// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module bd_3a92_vsc_0_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_895_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        OutYUV_dout,
        OutYUV_num_data_valid,
        OutYUV_fifo_cap,
        OutYUV_empty_n,
        OutYUV_read,
        m_axis_video_TREADY,
        sof,
        cols,
        m_axis_video_TDATA,
        m_axis_video_TVALID,
        m_axis_video_TKEEP,
        m_axis_video_TSTRB,
        m_axis_video_TUSER,
        m_axis_video_TLAST,
        m_axis_video_TID,
        m_axis_video_TDEST,
        ColorMode_load,
        sub
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [23:0] OutYUV_dout;
input  [4:0] OutYUV_num_data_valid;
input  [4:0] OutYUV_fifo_cap;
input   OutYUV_empty_n;
output   OutYUV_read;
input   m_axis_video_TREADY;
input  [0:0] sof;
input  [10:0] cols;
output  [23:0] m_axis_video_TDATA;
output   m_axis_video_TVALID;
output  [2:0] m_axis_video_TKEEP;
output  [2:0] m_axis_video_TSTRB;
output  [0:0] m_axis_video_TUSER;
output  [0:0] m_axis_video_TLAST;
output  [0:0] m_axis_video_TID;
output  [0:0] m_axis_video_TDEST;
input  [7:0] ColorMode_load;
input  [11:0] sub;

reg ap_idle;
reg OutYUV_read;
reg m_axis_video_TVALID;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln895_reg_382;
reg    ap_block_state2_pp0_stage0_iter1;
reg   [0:0] icmp_ln895_reg_382_pp0_iter1_reg;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln895_fu_219_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    m_axis_video_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    OutYUV_blk_n;
reg   [0:0] tmp_user_V_reg_161;
wire   [7:0] ColorMode_load_read_reg_373;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] tmp_last_V_fu_231_p2;
reg   [0:0] tmp_last_V_reg_386;
reg   [0:0] tmp_last_V_reg_386_pp0_iter1_reg;
wire   [7:0] pix_rgb_V_fu_242_p1;
reg   [7:0] pix_rgb_V_reg_391;
wire   [7:0] pix_444_V_1_fu_246_p4;
reg   [7:0] pix_444_V_1_reg_396;
reg   [7:0] pix_444_V_reg_402;
wire   [8:0] p_Result_6_fu_266_p3;
wire   [8:0] p_Result_5_fu_274_p3;
wire   [8:0] p_Result_7_fu_282_p3;
wire    ap_loop_init;
wire   [8:0] ap_phi_reg_pp0_iter0_p_Val2_s_reg_173;
reg   [8:0] ap_phi_reg_pp0_iter1_p_Val2_s_reg_173;
reg   [8:0] ap_phi_reg_pp0_iter2_p_Val2_s_reg_173;
reg   [23:0] ap_phi_mux_p_Val2_6_phi_fu_187_p6;
wire   [23:0] p_Result_9_fu_318_p5;
wire   [23:0] ap_phi_reg_pp0_iter2_p_Val2_6_reg_184;
wire   [23:0] p_Result_4_fu_294_p5;
wire   [23:0] p_Result_8_fu_306_p5;
reg   [23:0] ap_phi_mux_axi_data_V_12_phi_fu_198_p6;
wire   [23:0] p_Result_11_fu_354_p5;
wire   [23:0] ap_phi_reg_pp0_iter2_axi_data_V_12_reg_195;
wire   [23:0] p_Result_s_fu_330_p5;
wire   [23:0] p_Result_10_fu_342_p5;
reg   [10:0] j_fu_98;
wire   [10:0] j_2_fu_225_p2;
reg   [10:0] ap_sig_allocacmp_j_1;
reg    ap_block_pp0_stage0_01001;
wire   [11:0] zext_ln895_fu_215_p1;
wire  signed [23:0] sext_ln844_fu_290_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_144;
reg    ap_condition_159;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

bd_3a92_vsc_0_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_159)) begin
        if (((icmp_ln895_reg_382 == 1'd0) & (8'd0 == ColorMode_load_read_reg_373))) begin
            ap_phi_reg_pp0_iter2_p_Val2_s_reg_173 <= p_Result_5_fu_274_p3;
        end else if (((icmp_ln895_reg_382 == 1'd0) & (8'd1 == ColorMode_load_read_reg_373))) begin
            ap_phi_reg_pp0_iter2_p_Val2_s_reg_173 <= p_Result_6_fu_266_p3;
        end else if ((1'b1 == ap_condition_144)) begin
            ap_phi_reg_pp0_iter2_p_Val2_s_reg_173 <= p_Result_7_fu_282_p3;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_p_Val2_s_reg_173 <= ap_phi_reg_pp0_iter1_p_Val2_s_reg_173;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln895_fu_219_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_98 <= j_2_fu_225_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_98 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        tmp_user_V_reg_161 <= sof;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln895_reg_382_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        tmp_user_V_reg_161 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln895_reg_382 <= icmp_ln895_fu_219_p2;
        icmp_ln895_reg_382_pp0_iter1_reg <= icmp_ln895_reg_382;
        tmp_last_V_reg_386_pp0_iter1_reg <= tmp_last_V_reg_386;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_Val2_s_reg_173 <= ap_phi_reg_pp0_iter0_p_Val2_s_reg_173;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln895_reg_382 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pix_444_V_1_reg_396 <= {{OutYUV_dout[15:8]}};
        pix_444_V_reg_402 <= {{OutYUV_dout[23:16]}};
        pix_rgb_V_reg_391 <= pix_rgb_V_fu_242_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln895_fu_219_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_last_V_reg_386 <= tmp_last_V_fu_231_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln895_reg_382 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        OutYUV_blk_n = OutYUV_empty_n;
    end else begin
        OutYUV_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln895_reg_382 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        OutYUV_read = 1'b1;
    end else begin
        OutYUV_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln895_fu_219_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln895_reg_382_pp0_iter1_reg == 1'd0)) begin
        if ((8'd0 == ColorMode_load_read_reg_373)) begin
            ap_phi_mux_axi_data_V_12_phi_fu_198_p6 = p_Result_10_fu_342_p5;
        end else if ((8'd1 == ColorMode_load_read_reg_373)) begin
            ap_phi_mux_axi_data_V_12_phi_fu_198_p6 = p_Result_s_fu_330_p5;
        end else if ((~(8'd0 == ColorMode_load_read_reg_373) & ~(8'd1 == ColorMode_load_read_reg_373))) begin
            ap_phi_mux_axi_data_V_12_phi_fu_198_p6 = p_Result_11_fu_354_p5;
        end else begin
            ap_phi_mux_axi_data_V_12_phi_fu_198_p6 = ap_phi_reg_pp0_iter2_axi_data_V_12_reg_195;
        end
    end else begin
        ap_phi_mux_axi_data_V_12_phi_fu_198_p6 = ap_phi_reg_pp0_iter2_axi_data_V_12_reg_195;
    end
end

always @ (*) begin
    if ((icmp_ln895_reg_382_pp0_iter1_reg == 1'd0)) begin
        if ((8'd0 == ColorMode_load_read_reg_373)) begin
            ap_phi_mux_p_Val2_6_phi_fu_187_p6 = p_Result_8_fu_306_p5;
        end else if ((8'd1 == ColorMode_load_read_reg_373)) begin
            ap_phi_mux_p_Val2_6_phi_fu_187_p6 = p_Result_4_fu_294_p5;
        end else if ((~(8'd0 == ColorMode_load_read_reg_373) & ~(8'd1 == ColorMode_load_read_reg_373))) begin
            ap_phi_mux_p_Val2_6_phi_fu_187_p6 = p_Result_9_fu_318_p5;
        end else begin
            ap_phi_mux_p_Val2_6_phi_fu_187_p6 = ap_phi_reg_pp0_iter2_p_Val2_6_reg_184;
        end
    end else begin
        ap_phi_mux_p_Val2_6_phi_fu_187_p6 = ap_phi_reg_pp0_iter2_p_Val2_6_reg_184;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_1 = 11'd0;
    end else begin
        ap_sig_allocacmp_j_1 = j_fu_98;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln895_reg_382_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        m_axis_video_TDATA_blk_n = m_axis_video_TREADY;
    end else begin
        m_axis_video_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln895_reg_382_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        m_axis_video_TVALID = 1'b1;
    end else begin
        m_axis_video_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ColorMode_load_read_reg_373 = ColorMode_load;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln895_reg_382_pp0_iter1_reg == 1'd0) & (m_axis_video_TREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((icmp_ln895_reg_382 == 1'd0) & (1'b0 == OutYUV_empty_n) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b1 == ap_block_state3_io) | ((icmp_ln895_reg_382_pp0_iter1_reg == 1'd0) & (m_axis_video_TREADY == 1'b0)))) | ((icmp_ln895_reg_382 == 1'd0) & (1'b0 == OutYUV_empty_n) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b1 == ap_block_state3_io) | ((icmp_ln895_reg_382_pp0_iter1_reg == 1'd0) & (m_axis_video_TREADY == 1'b0)))) | ((icmp_ln895_reg_382 == 1'd0) & (1'b0 == OutYUV_empty_n) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((icmp_ln895_reg_382 == 1'd0) & (1'b0 == OutYUV_empty_n));
end

always @ (*) begin
    ap_block_state3_io = ((icmp_ln895_reg_382_pp0_iter1_reg == 1'd0) & (m_axis_video_TREADY == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((icmp_ln895_reg_382_pp0_iter1_reg == 1'd0) & (m_axis_video_TREADY == 1'b0));
end

always @ (*) begin
    ap_condition_144 = (~(8'd0 == ColorMode_load_read_reg_373) & ~(8'd1 == ColorMode_load_read_reg_373) & (icmp_ln895_reg_382 == 1'd0));
end

always @ (*) begin
    ap_condition_159 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter0_p_Val2_s_reg_173 = 'bx;

assign ap_phi_reg_pp0_iter2_axi_data_V_12_reg_195 = 'bx;

assign ap_phi_reg_pp0_iter2_p_Val2_6_reg_184 = 'bx;

assign icmp_ln895_fu_219_p2 = ((ap_sig_allocacmp_j_1 == cols) ? 1'b1 : 1'b0);

assign j_2_fu_225_p2 = (ap_sig_allocacmp_j_1 + 11'd1);

assign m_axis_video_TDATA = ap_phi_mux_axi_data_V_12_phi_fu_198_p6;

assign m_axis_video_TDEST = 1'd0;

assign m_axis_video_TID = 1'd0;

assign m_axis_video_TKEEP = 3'd7;

assign m_axis_video_TLAST = tmp_last_V_reg_386_pp0_iter1_reg;

assign m_axis_video_TSTRB = 3'd0;

assign m_axis_video_TUSER = tmp_user_V_reg_161;

assign p_Result_10_fu_342_p5 = {{pix_rgb_V_reg_391}, {ap_phi_mux_p_Val2_6_phi_fu_187_p6[15:0]}};

assign p_Result_11_fu_354_p5 = {{pix_444_V_reg_402}, {ap_phi_mux_p_Val2_6_phi_fu_187_p6[15:0]}};

assign p_Result_4_fu_294_p5 = {{sext_ln844_fu_290_p1[23:16]}, {pix_444_V_1_reg_396}, {sext_ln844_fu_290_p1[7:0]}};

assign p_Result_5_fu_274_p3 = {{1'd1}, {pix_444_V_1_fu_246_p4}};

assign p_Result_6_fu_266_p3 = {{1'd1}, {pix_rgb_V_fu_242_p1}};

assign p_Result_7_fu_282_p3 = {{1'd1}, {pix_rgb_V_fu_242_p1}};

assign p_Result_8_fu_306_p5 = {{sext_ln844_fu_290_p1[23:16]}, {pix_444_V_reg_402}, {sext_ln844_fu_290_p1[7:0]}};

assign p_Result_9_fu_318_p5 = {{sext_ln844_fu_290_p1[23:16]}, {pix_444_V_1_reg_396}, {sext_ln844_fu_290_p1[7:0]}};

assign p_Result_s_fu_330_p5 = {{pix_444_V_reg_402}, {ap_phi_mux_p_Val2_6_phi_fu_187_p6[15:0]}};

assign pix_444_V_1_fu_246_p4 = {{OutYUV_dout[15:8]}};

assign pix_rgb_V_fu_242_p1 = OutYUV_dout[7:0];

assign sext_ln844_fu_290_p1 = $signed(ap_phi_reg_pp0_iter2_p_Val2_s_reg_173);

assign tmp_last_V_fu_231_p2 = ((zext_ln895_fu_215_p1 == sub) ? 1'b1 : 1'b0);

assign zext_ln895_fu_215_p1 = ap_sig_allocacmp_j_1;

endmodule //bd_3a92_vsc_0_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_895_2
