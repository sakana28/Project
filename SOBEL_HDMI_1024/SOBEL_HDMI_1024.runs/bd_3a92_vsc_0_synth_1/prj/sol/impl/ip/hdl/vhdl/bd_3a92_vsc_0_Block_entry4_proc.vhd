-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bd_3a92_vsc_0_Block_entry4_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    ColorMode : IN STD_LOGIC_VECTOR (7 downto 0);
    HwReg_ColorMode_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    HwReg_ColorMode_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    HwReg_ColorMode_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    HwReg_ColorMode_full_n : IN STD_LOGIC;
    HwReg_ColorMode_write : OUT STD_LOGIC;
    HeightIn : IN STD_LOGIC_VECTOR (15 downto 0);
    HeightOut : IN STD_LOGIC_VECTOR (15 downto 0);
    LineRate : IN STD_LOGIC_VECTOR (31 downto 0);
    HwReg_LineRate_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    HwReg_LineRate_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    HwReg_LineRate_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    HwReg_LineRate_full_n : IN STD_LOGIC;
    HwReg_LineRate_write : OUT STD_LOGIC;
    Width : IN STD_LOGIC_VECTOR (15 downto 0);
    ColorMode_vcr_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    ColorMode_vcr_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    ColorMode_vcr_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    ColorMode_vcr_full_n : IN STD_LOGIC;
    ColorMode_vcr_write : OUT STD_LOGIC;
    HwReg_HeightIn_c12_din : OUT STD_LOGIC_VECTOR (10 downto 0);
    HwReg_HeightIn_c12_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    HwReg_HeightIn_c12_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    HwReg_HeightIn_c12_full_n : IN STD_LOGIC;
    HwReg_HeightIn_c12_write : OUT STD_LOGIC;
    HwReg_Width_c14_din : OUT STD_LOGIC_VECTOR (10 downto 0);
    HwReg_Width_c14_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    HwReg_Width_c14_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    HwReg_Width_c14_full_n : IN STD_LOGIC;
    HwReg_Width_c14_write : OUT STD_LOGIC;
    HwReg_HeightOut_c15_din : OUT STD_LOGIC_VECTOR (10 downto 0);
    HwReg_HeightOut_c15_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    HwReg_HeightOut_c15_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    HwReg_HeightOut_c15_full_n : IN STD_LOGIC;
    HwReg_HeightOut_c15_write : OUT STD_LOGIC );
end;


architecture behav of bd_3a92_vsc_0_Block_entry4_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal HwReg_ColorMode_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal HwReg_LineRate_blk_n : STD_LOGIC;
    signal ColorMode_vcr_blk_n : STD_LOGIC;
    signal HwReg_HeightIn_c12_blk_n : STD_LOGIC;
    signal HwReg_Width_c14_blk_n : STD_LOGIC;
    signal HwReg_HeightOut_c15_blk_n : STD_LOGIC;
    signal icmp_ln100_fu_129_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_state2 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((ap_const_logic_0 = HwReg_HeightOut_c15_full_n) or (ap_const_logic_0 = HwReg_Width_c14_full_n) or (ap_const_logic_0 = HwReg_HeightIn_c12_full_n) or (ap_const_logic_0 = ColorMode_vcr_full_n) or (ap_const_logic_0 = HwReg_LineRate_full_n) or (ap_const_logic_0 = HwReg_ColorMode_full_n))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, HwReg_ColorMode_full_n, HwReg_LineRate_full_n, ColorMode_vcr_full_n, HwReg_HeightIn_c12_full_n, HwReg_Width_c14_full_n, HwReg_HeightOut_c15_full_n, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((ap_const_logic_0 = HwReg_HeightOut_c15_full_n) or (ap_const_logic_0 = HwReg_Width_c14_full_n) or (ap_const_logic_0 = HwReg_HeightIn_c12_full_n) or (ap_const_logic_0 = ColorMode_vcr_full_n) or (ap_const_logic_0 = HwReg_LineRate_full_n) or (ap_const_logic_0 = HwReg_ColorMode_full_n))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    ColorMode_vcr_blk_n_assign_proc : process(ColorMode_vcr_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ColorMode_vcr_blk_n <= ColorMode_vcr_full_n;
        else 
            ColorMode_vcr_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ColorMode_vcr_din <= 
        ap_const_lv8_2 when (icmp_ln100_fu_129_p2(0) = '1') else 
        ColorMode;

    ColorMode_vcr_write_assign_proc : process(HwReg_ColorMode_full_n, HwReg_LineRate_full_n, ColorMode_vcr_full_n, HwReg_HeightIn_c12_full_n, HwReg_Width_c14_full_n, HwReg_HeightOut_c15_full_n, ap_CS_fsm_state2)
    begin
        if ((not(((ap_const_logic_0 = HwReg_HeightOut_c15_full_n) or (ap_const_logic_0 = HwReg_Width_c14_full_n) or (ap_const_logic_0 = HwReg_HeightIn_c12_full_n) or (ap_const_logic_0 = ColorMode_vcr_full_n) or (ap_const_logic_0 = HwReg_LineRate_full_n) or (ap_const_logic_0 = HwReg_ColorMode_full_n))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ColorMode_vcr_write <= ap_const_logic_1;
        else 
            ColorMode_vcr_write <= ap_const_logic_0;
        end if; 
    end process;


    HwReg_ColorMode_blk_n_assign_proc : process(HwReg_ColorMode_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            HwReg_ColorMode_blk_n <= HwReg_ColorMode_full_n;
        else 
            HwReg_ColorMode_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    HwReg_ColorMode_din <= ColorMode;

    HwReg_ColorMode_write_assign_proc : process(HwReg_ColorMode_full_n, HwReg_LineRate_full_n, ColorMode_vcr_full_n, HwReg_HeightIn_c12_full_n, HwReg_Width_c14_full_n, HwReg_HeightOut_c15_full_n, ap_CS_fsm_state2)
    begin
        if ((not(((ap_const_logic_0 = HwReg_HeightOut_c15_full_n) or (ap_const_logic_0 = HwReg_Width_c14_full_n) or (ap_const_logic_0 = HwReg_HeightIn_c12_full_n) or (ap_const_logic_0 = ColorMode_vcr_full_n) or (ap_const_logic_0 = HwReg_LineRate_full_n) or (ap_const_logic_0 = HwReg_ColorMode_full_n))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            HwReg_ColorMode_write <= ap_const_logic_1;
        else 
            HwReg_ColorMode_write <= ap_const_logic_0;
        end if; 
    end process;


    HwReg_HeightIn_c12_blk_n_assign_proc : process(HwReg_HeightIn_c12_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            HwReg_HeightIn_c12_blk_n <= HwReg_HeightIn_c12_full_n;
        else 
            HwReg_HeightIn_c12_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    HwReg_HeightIn_c12_din <= HeightIn(11 - 1 downto 0);

    HwReg_HeightIn_c12_write_assign_proc : process(HwReg_ColorMode_full_n, HwReg_LineRate_full_n, ColorMode_vcr_full_n, HwReg_HeightIn_c12_full_n, HwReg_Width_c14_full_n, HwReg_HeightOut_c15_full_n, ap_CS_fsm_state2)
    begin
        if ((not(((ap_const_logic_0 = HwReg_HeightOut_c15_full_n) or (ap_const_logic_0 = HwReg_Width_c14_full_n) or (ap_const_logic_0 = HwReg_HeightIn_c12_full_n) or (ap_const_logic_0 = ColorMode_vcr_full_n) or (ap_const_logic_0 = HwReg_LineRate_full_n) or (ap_const_logic_0 = HwReg_ColorMode_full_n))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            HwReg_HeightIn_c12_write <= ap_const_logic_1;
        else 
            HwReg_HeightIn_c12_write <= ap_const_logic_0;
        end if; 
    end process;


    HwReg_HeightOut_c15_blk_n_assign_proc : process(HwReg_HeightOut_c15_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            HwReg_HeightOut_c15_blk_n <= HwReg_HeightOut_c15_full_n;
        else 
            HwReg_HeightOut_c15_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    HwReg_HeightOut_c15_din <= HeightOut(11 - 1 downto 0);

    HwReg_HeightOut_c15_write_assign_proc : process(HwReg_ColorMode_full_n, HwReg_LineRate_full_n, ColorMode_vcr_full_n, HwReg_HeightIn_c12_full_n, HwReg_Width_c14_full_n, HwReg_HeightOut_c15_full_n, ap_CS_fsm_state2)
    begin
        if ((not(((ap_const_logic_0 = HwReg_HeightOut_c15_full_n) or (ap_const_logic_0 = HwReg_Width_c14_full_n) or (ap_const_logic_0 = HwReg_HeightIn_c12_full_n) or (ap_const_logic_0 = ColorMode_vcr_full_n) or (ap_const_logic_0 = HwReg_LineRate_full_n) or (ap_const_logic_0 = HwReg_ColorMode_full_n))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            HwReg_HeightOut_c15_write <= ap_const_logic_1;
        else 
            HwReg_HeightOut_c15_write <= ap_const_logic_0;
        end if; 
    end process;


    HwReg_LineRate_blk_n_assign_proc : process(HwReg_LineRate_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            HwReg_LineRate_blk_n <= HwReg_LineRate_full_n;
        else 
            HwReg_LineRate_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    HwReg_LineRate_din <= LineRate;

    HwReg_LineRate_write_assign_proc : process(HwReg_ColorMode_full_n, HwReg_LineRate_full_n, ColorMode_vcr_full_n, HwReg_HeightIn_c12_full_n, HwReg_Width_c14_full_n, HwReg_HeightOut_c15_full_n, ap_CS_fsm_state2)
    begin
        if ((not(((ap_const_logic_0 = HwReg_HeightOut_c15_full_n) or (ap_const_logic_0 = HwReg_Width_c14_full_n) or (ap_const_logic_0 = HwReg_HeightIn_c12_full_n) or (ap_const_logic_0 = ColorMode_vcr_full_n) or (ap_const_logic_0 = HwReg_LineRate_full_n) or (ap_const_logic_0 = HwReg_ColorMode_full_n))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            HwReg_LineRate_write <= ap_const_logic_1;
        else 
            HwReg_LineRate_write <= ap_const_logic_0;
        end if; 
    end process;


    HwReg_Width_c14_blk_n_assign_proc : process(HwReg_Width_c14_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            HwReg_Width_c14_blk_n <= HwReg_Width_c14_full_n;
        else 
            HwReg_Width_c14_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    HwReg_Width_c14_din <= Width(11 - 1 downto 0);

    HwReg_Width_c14_write_assign_proc : process(HwReg_ColorMode_full_n, HwReg_LineRate_full_n, ColorMode_vcr_full_n, HwReg_HeightIn_c12_full_n, HwReg_Width_c14_full_n, HwReg_HeightOut_c15_full_n, ap_CS_fsm_state2)
    begin
        if ((not(((ap_const_logic_0 = HwReg_HeightOut_c15_full_n) or (ap_const_logic_0 = HwReg_Width_c14_full_n) or (ap_const_logic_0 = HwReg_HeightIn_c12_full_n) or (ap_const_logic_0 = ColorMode_vcr_full_n) or (ap_const_logic_0 = HwReg_LineRate_full_n) or (ap_const_logic_0 = HwReg_ColorMode_full_n))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            HwReg_Width_c14_write <= ap_const_logic_1;
        else 
            HwReg_Width_c14_write <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(real_start, ap_done_reg)
    begin
        if (((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(HwReg_ColorMode_full_n, HwReg_LineRate_full_n, ColorMode_vcr_full_n, HwReg_HeightIn_c12_full_n, HwReg_Width_c14_full_n, HwReg_HeightOut_c15_full_n)
    begin
        if (((ap_const_logic_0 = HwReg_HeightOut_c15_full_n) or (ap_const_logic_0 = HwReg_Width_c14_full_n) or (ap_const_logic_0 = HwReg_HeightIn_c12_full_n) or (ap_const_logic_0 = ColorMode_vcr_full_n) or (ap_const_logic_0 = HwReg_LineRate_full_n) or (ap_const_logic_0 = HwReg_ColorMode_full_n))) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_assign_proc : process(HwReg_ColorMode_full_n, HwReg_LineRate_full_n, ColorMode_vcr_full_n, HwReg_HeightIn_c12_full_n, HwReg_Width_c14_full_n, HwReg_HeightOut_c15_full_n)
    begin
                ap_block_state2 <= ((ap_const_logic_0 = HwReg_HeightOut_c15_full_n) or (ap_const_logic_0 = HwReg_Width_c14_full_n) or (ap_const_logic_0 = HwReg_HeightIn_c12_full_n) or (ap_const_logic_0 = ColorMode_vcr_full_n) or (ap_const_logic_0 = HwReg_LineRate_full_n) or (ap_const_logic_0 = HwReg_ColorMode_full_n));
    end process;


    ap_done_assign_proc : process(ap_done_reg, HwReg_ColorMode_full_n, HwReg_LineRate_full_n, ColorMode_vcr_full_n, HwReg_HeightIn_c12_full_n, HwReg_Width_c14_full_n, HwReg_HeightOut_c15_full_n, ap_CS_fsm_state2)
    begin
        if ((not(((ap_const_logic_0 = HwReg_HeightOut_c15_full_n) or (ap_const_logic_0 = HwReg_Width_c14_full_n) or (ap_const_logic_0 = HwReg_HeightIn_c12_full_n) or (ap_const_logic_0 = ColorMode_vcr_full_n) or (ap_const_logic_0 = HwReg_LineRate_full_n) or (ap_const_logic_0 = HwReg_ColorMode_full_n))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    icmp_ln100_fu_129_p2 <= "1" when (ColorMode = ap_const_lv8_3) else "0";

    internal_ap_ready_assign_proc : process(HwReg_ColorMode_full_n, HwReg_LineRate_full_n, ColorMode_vcr_full_n, HwReg_HeightIn_c12_full_n, HwReg_Width_c14_full_n, HwReg_HeightOut_c15_full_n, ap_CS_fsm_state2)
    begin
        if ((not(((ap_const_logic_0 = HwReg_HeightOut_c15_full_n) or (ap_const_logic_0 = HwReg_Width_c14_full_n) or (ap_const_logic_0 = HwReg_HeightIn_c12_full_n) or (ap_const_logic_0 = ColorMode_vcr_full_n) or (ap_const_logic_0 = HwReg_LineRate_full_n) or (ap_const_logic_0 = HwReg_ColorMode_full_n))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
