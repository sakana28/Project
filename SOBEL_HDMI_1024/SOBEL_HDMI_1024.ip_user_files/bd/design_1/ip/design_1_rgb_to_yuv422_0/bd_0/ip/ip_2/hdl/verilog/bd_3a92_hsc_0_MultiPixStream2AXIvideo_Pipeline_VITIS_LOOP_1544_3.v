// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module bd_3a92_hsc_0_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_1544_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        stream_out_422_dout,
        stream_out_422_num_data_valid,
        stream_out_422_fifo_cap,
        stream_out_422_empty_n,
        stream_out_422_read,
        m_axis_video_TREADY,
        sof,
        trunc_ln5,
        sub,
        map_V_2_reload,
        map_V_1_reload,
        map_V_reload,
        m_axis_video_TDATA,
        m_axis_video_TVALID,
        m_axis_video_TKEEP,
        m_axis_video_TSTRB,
        m_axis_video_TUSER,
        m_axis_video_TLAST,
        m_axis_video_TID,
        m_axis_video_TDEST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [23:0] stream_out_422_dout;
input  [4:0] stream_out_422_num_data_valid;
input  [4:0] stream_out_422_fifo_cap;
input   stream_out_422_empty_n;
output   stream_out_422_read;
input   m_axis_video_TREADY;
input  [0:0] sof;
input  [10:0] trunc_ln5;
input  [10:0] sub;
input  [4:0] map_V_2_reload;
input  [4:0] map_V_1_reload;
input  [4:0] map_V_reload;
output  [23:0] m_axis_video_TDATA;
output   m_axis_video_TVALID;
output  [2:0] m_axis_video_TKEEP;
output  [2:0] m_axis_video_TSTRB;
output  [0:0] m_axis_video_TUSER;
output  [0:0] m_axis_video_TLAST;
output  [0:0] m_axis_video_TID;
output  [0:0] m_axis_video_TDEST;

reg ap_idle;
reg stream_out_422_read;
reg m_axis_video_TVALID;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln1544_reg_307;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state2_io;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1544_fu_189_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    stream_out_422_blk_n;
wire    ap_block_pp0_stage0;
reg    m_axis_video_TDATA_blk_n;
reg   [0:0] sof_2_reg_169;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] axi_last_V_fu_201_p2;
reg   [0:0] axi_last_V_reg_311;
wire    ap_loop_init;
reg   [10:0] j_fu_94;
wire   [10:0] j_2_fu_195_p2;
reg   [10:0] ap_sig_allocacmp_j_1;
reg    ap_block_pp0_stage0_01001;
wire   [7:0] pix_val_V_fu_212_p1;
wire   [7:0] tmp_fu_236_p2;
wire   [7:0] tmp_fu_236_p3;
wire   [7:0] tmp_s_fu_247_p2;
wire   [7:0] tmp_s_fu_247_p3;
wire   [7:0] tmp_12_fu_258_p2;
wire   [7:0] tmp_12_fu_258_p3;
wire   [7:0] tmp_12_fu_258_p5;
wire   [7:0] tmp_s_fu_247_p5;
wire   [7:0] tmp_fu_236_p5;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_228;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

bd_3a92_hsc_0_mux_35_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 5 ),
    .dout_WIDTH( 8 ))
mux_35_8_1_1_U254(
    .din0(pix_val_V_fu_212_p1),
    .din1(tmp_fu_236_p2),
    .din2(tmp_fu_236_p3),
    .din3(map_V_2_reload),
    .dout(tmp_fu_236_p5)
);

bd_3a92_hsc_0_mux_35_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 5 ),
    .dout_WIDTH( 8 ))
mux_35_8_1_1_U255(
    .din0(pix_val_V_fu_212_p1),
    .din1(tmp_s_fu_247_p2),
    .din2(tmp_s_fu_247_p3),
    .din3(map_V_1_reload),
    .dout(tmp_s_fu_247_p5)
);

bd_3a92_hsc_0_mux_35_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 5 ),
    .dout_WIDTH( 8 ))
mux_35_8_1_1_U256(
    .din0(pix_val_V_fu_212_p1),
    .din1(tmp_12_fu_258_p2),
    .din2(tmp_12_fu_258_p3),
    .din3(map_V_reload),
    .dout(tmp_12_fu_258_p5)
);

bd_3a92_hsc_0_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if (((ap_loop_exit_ready == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_11001)) begin
            ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln1544_fu_189_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_94 <= j_2_fu_195_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_94 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_init == 1'b1))) begin
            sof_2_reg_169 <= sof;
        end else if ((1'b1 == ap_condition_228)) begin
            sof_2_reg_169 <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1544_fu_189_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        axi_last_V_reg_311 <= axi_last_V_fu_201_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1544_reg_307 <= icmp_ln1544_fu_189_p2;
    end
end

always @ (*) begin
    if (((icmp_ln1544_fu_189_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_1 = 11'd0;
    end else begin
        ap_sig_allocacmp_j_1 = j_fu_94;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln1544_reg_307 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axis_video_TDATA_blk_n = m_axis_video_TREADY;
    end else begin
        m_axis_video_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1544_reg_307 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axis_video_TVALID = 1'b1;
    end else begin
        m_axis_video_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln1544_reg_307 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_out_422_blk_n = stream_out_422_empty_n;
    end else begin
        stream_out_422_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1544_reg_307 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_out_422_read = 1'b1;
    end else begin
        stream_out_422_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((m_axis_video_TREADY == 1'b0) & (icmp_ln1544_reg_307 == 1'd0)) | ((icmp_ln1544_reg_307 == 1'd0) & (stream_out_422_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state2_io) | ((m_axis_video_TREADY == 1'b0) & (icmp_ln1544_reg_307 == 1'd0)) | ((icmp_ln1544_reg_307 == 1'd0) & (stream_out_422_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state2_io) | ((m_axis_video_TREADY == 1'b0) & (icmp_ln1544_reg_307 == 1'd0)) | ((icmp_ln1544_reg_307 == 1'd0) & (stream_out_422_empty_n == 1'b0))));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_io = ((m_axis_video_TREADY == 1'b0) & (icmp_ln1544_reg_307 == 1'd0));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (((m_axis_video_TREADY == 1'b0) & (icmp_ln1544_reg_307 == 1'd0)) | ((icmp_ln1544_reg_307 == 1'd0) & (stream_out_422_empty_n == 1'b0)));
end

always @ (*) begin
    ap_condition_228 = ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1544_reg_307 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign axi_last_V_fu_201_p2 = ((ap_sig_allocacmp_j_1 == sub) ? 1'b1 : 1'b0);

assign icmp_ln1544_fu_189_p2 = ((ap_sig_allocacmp_j_1 == trunc_ln5) ? 1'b1 : 1'b0);

assign j_2_fu_195_p2 = (ap_sig_allocacmp_j_1 + 11'd1);

assign m_axis_video_TDATA = {{{tmp_12_fu_258_p5}, {tmp_s_fu_247_p5}}, {tmp_fu_236_p5}};

assign m_axis_video_TDEST = 1'd0;

assign m_axis_video_TID = 1'd0;

assign m_axis_video_TKEEP = 3'd7;

assign m_axis_video_TLAST = axi_last_V_reg_311;

assign m_axis_video_TSTRB = 3'd0;

assign m_axis_video_TUSER = sof_2_reg_169;

assign pix_val_V_fu_212_p1 = stream_out_422_dout[7:0];

assign tmp_12_fu_258_p2 = {{stream_out_422_dout[15:8]}};

assign tmp_12_fu_258_p3 = {{stream_out_422_dout[23:16]}};

assign tmp_fu_236_p2 = {{stream_out_422_dout[15:8]}};

assign tmp_fu_236_p3 = {{stream_out_422_dout[23:16]}};

assign tmp_s_fu_247_p2 = {{stream_out_422_dout[15:8]}};

assign tmp_s_fu_247_p3 = {{stream_out_422_dout[23:16]}};

endmodule //bd_3a92_hsc_0_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_1544_3
