// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module bd_3a92_ltr_0_v_letterbox_core_Pipeline_VITIS_LOOP_167_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        srcYUV_dout,
        srcYUV_num_data_valid,
        srcYUV_fifo_cap,
        srcYUV_empty_n,
        srcYUV_read,
        outYUV_din,
        outYUV_num_data_valid,
        outYUV_fifo_cap,
        outYUV_full_n,
        outYUV_write,
        loopWidth,
        loopStart,
        loopEnd,
        cmp116,
        cmp22_not,
        cmp19_not,
        p_0_2_0_0_0154,
        conv2_i_i,
        Cb_G_value_load_cast,
        Cr_B_value_load_cast
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [23:0] srcYUV_dout;
input  [4:0] srcYUV_num_data_valid;
input  [4:0] srcYUV_fifo_cap;
input   srcYUV_empty_n;
output   srcYUV_read;
output  [23:0] outYUV_din;
input  [4:0] outYUV_num_data_valid;
input  [4:0] outYUV_fifo_cap;
input   outYUV_full_n;
output   outYUV_write;
input  [15:0] loopWidth;
input  [15:0] loopStart;
input  [15:0] loopEnd;
input  [0:0] cmp116;
input  [0:0] cmp22_not;
input  [0:0] cmp19_not;
input  [7:0] p_0_2_0_0_0154;
input  [7:0] conv2_i_i;
input  [7:0] Cb_G_value_load_cast;
input  [7:0] Cr_B_value_load_cast;

reg ap_idle;
reg srcYUV_read;
reg outYUV_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln167_fu_155_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    srcYUV_blk_n;
wire    ap_block_pp0_stage0;
reg    outYUV_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] or_ln185_2_fu_215_p2;
reg   [0:0] or_ln185_2_reg_347;
wire   [7:0] select_ln207_fu_233_p3;
reg   [7:0] select_ln207_reg_352;
wire   [7:0] select_ln185_fu_287_p3;
reg   [7:0] select_ln185_reg_357;
wire   [7:0] select_ln185_1_fu_294_p3;
reg   [7:0] select_ln185_1_reg_362;
wire   [7:0] select_ln185_2_fu_301_p3;
reg   [7:0] select_ln185_2_reg_367;
reg   [15:0] x_fu_70;
wire   [15:0] x_3_fu_241_p2;
wire    ap_loop_init;
reg   [15:0] ap_sig_allocacmp_x_2;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln185_fu_161_p2;
wire   [0:0] icmp_ln185_1_fu_167_p2;
wire   [0:0] icmp_ln185_3_fu_185_p2;
wire   [0:0] icmp_ln185_2_fu_179_p2;
wire   [0:0] and_ln185_fu_191_p2;
wire   [0:0] or_ln185_1_fu_197_p2;
wire   [0:0] or_ln185_fu_173_p2;
wire   [0:0] xor_ln185_fu_203_p2;
wire   [0:0] and_ln185_1_fu_209_p2;
wire   [0:0] trunc_ln167_fu_221_p1;
wire   [7:0] select_ln209_fu_225_p3;
wire   [7:0] trunc_ln145_2_fu_266_p4;
wire   [0:0] or_ln185_3_fu_283_p2;
wire   [7:0] select_ln191_fu_276_p3;
wire   [7:0] trunc_ln145_fu_252_p1;
wire   [7:0] trunc_ln145_1_fu_256_p4;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

bd_3a92_ltr_0_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln167_fu_155_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            x_fu_70 <= x_3_fu_241_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            x_fu_70 <= 16'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        select_ln185_1_reg_362 <= select_ln185_1_fu_294_p3;
        select_ln185_2_reg_367 <= select_ln185_2_fu_301_p3;
        select_ln185_reg_357 <= select_ln185_fu_287_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln167_fu_155_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        or_ln185_2_reg_347 <= or_ln185_2_fu_215_p2;
        select_ln207_reg_352 <= select_ln207_fu_233_p3;
    end
end

always @ (*) begin
    if (((icmp_ln167_fu_155_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_x_2 = 16'd1;
    end else begin
        ap_sig_allocacmp_x_2 = x_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        outYUV_blk_n = outYUV_full_n;
    end else begin
        outYUV_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        outYUV_write = 1'b1;
    end else begin
        outYUV_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        srcYUV_blk_n = srcYUV_empty_n;
    end else begin
        srcYUV_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        srcYUV_read = 1'b1;
    end else begin
        srcYUV_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln185_1_fu_209_p2 = (xor_ln185_fu_203_p2 & or_ln185_fu_173_p2);

assign and_ln185_fu_191_p2 = (icmp_ln185_3_fu_185_p2 & icmp_ln185_2_fu_179_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((outYUV_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((srcYUV_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((outYUV_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((srcYUV_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((outYUV_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((srcYUV_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (srcYUV_empty_n == 1'b0);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (outYUV_full_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln167_fu_155_p2 = (($signed(ap_sig_allocacmp_x_2) > $signed(loopWidth)) ? 1'b1 : 1'b0);

assign icmp_ln185_1_fu_167_p2 = ((ap_sig_allocacmp_x_2 == loopEnd) ? 1'b1 : 1'b0);

assign icmp_ln185_2_fu_179_p2 = (($signed(ap_sig_allocacmp_x_2) > $signed(loopStart)) ? 1'b1 : 1'b0);

assign icmp_ln185_3_fu_185_p2 = (($signed(ap_sig_allocacmp_x_2) < $signed(loopEnd)) ? 1'b1 : 1'b0);

assign icmp_ln185_fu_161_p2 = ((ap_sig_allocacmp_x_2 != loopStart) ? 1'b1 : 1'b0);

assign or_ln185_1_fu_197_p2 = (icmp_ln185_1_fu_167_p2 | and_ln185_fu_191_p2);

assign or_ln185_2_fu_215_p2 = (cmp22_not | and_ln185_1_fu_209_p2);

assign or_ln185_3_fu_283_p2 = (or_ln185_2_reg_347 | cmp19_not);

assign or_ln185_fu_173_p2 = (icmp_ln185_fu_161_p2 | icmp_ln185_1_fu_167_p2);

assign outYUV_din = {{{select_ln185_reg_357}, {select_ln185_2_reg_367}}, {select_ln185_1_reg_362}};

assign select_ln185_1_fu_294_p3 = ((or_ln185_3_fu_283_p2[0:0] == 1'b1) ? conv2_i_i : trunc_ln145_fu_252_p1);

assign select_ln185_2_fu_301_p3 = ((or_ln185_3_fu_283_p2[0:0] == 1'b1) ? select_ln207_reg_352 : trunc_ln145_1_fu_256_p4);

assign select_ln185_fu_287_p3 = ((or_ln185_3_fu_283_p2[0:0] == 1'b1) ? p_0_2_0_0_0154 : select_ln191_fu_276_p3);

assign select_ln191_fu_276_p3 = ((cmp116[0:0] == 1'b1) ? 8'd0 : trunc_ln145_2_fu_266_p4);

assign select_ln207_fu_233_p3 = ((cmp116[0:0] == 1'b1) ? select_ln209_fu_225_p3 : Cb_G_value_load_cast);

assign select_ln209_fu_225_p3 = ((trunc_ln167_fu_221_p1[0:0] == 1'b1) ? Cb_G_value_load_cast : Cr_B_value_load_cast);

assign trunc_ln145_1_fu_256_p4 = {{srcYUV_dout[15:8]}};

assign trunc_ln145_2_fu_266_p4 = {{srcYUV_dout[23:16]}};

assign trunc_ln145_fu_252_p1 = srcYUV_dout[7:0];

assign trunc_ln167_fu_221_p1 = ap_sig_allocacmp_x_2[0:0];

assign x_3_fu_241_p2 = (ap_sig_allocacmp_x_2 + 16'd1);

assign xor_ln185_fu_203_p2 = (or_ln185_1_fu_197_p2 ^ 1'd1);

endmodule //bd_3a92_ltr_0_v_letterbox_core_Pipeline_VITIS_LOOP_167_2
